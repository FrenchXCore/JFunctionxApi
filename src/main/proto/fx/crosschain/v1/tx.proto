syntax = "proto3";
package fx.gravity.crosschain.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "fx/crosschain/v1/types.proto";

option go_package = "github.com/functionx/fx-core/x/crosschain/types";

// Msg defines the state transitions possible within gravity
service Msg {
  rpc BondedOracle(MsgBondedOracle) returns (MsgBondedOracleResponse);
  rpc AddDelegate(MsgAddDelegate) returns (MsgAddDelegateResponse);
  rpc EditOracle(MsgEditOracle) returns (MsgEditOracleResponse);
  rpc WithdrawReward(MsgWithdrawReward) returns (MsgWithdrawRewardResponse);
  rpc UnbondedOracle(MsgUnbondedOracle) returns (MsgUnbondedOracleResponse);

  rpc OracleSetConfirm(MsgOracleSetConfirm) returns (MsgOracleSetConfirmResponse);
  rpc OracleSetUpdateClaim(MsgOracleSetUpdatedClaim) returns (MsgOracleSetUpdatedClaimResponse);

  rpc BridgeTokenClaim(MsgBridgeTokenClaim) returns (MsgBridgeTokenClaimResponse);

  rpc SendToFxClaim(MsgSendToFxClaim) returns (MsgSendToFxClaimResponse);

  rpc SendToExternal(MsgSendToExternal) returns (MsgSendToExternalResponse);
  rpc CancelSendToExternal(MsgCancelSendToExternal) returns (MsgCancelSendToExternalResponse);
  rpc SendToExternalClaim(MsgSendToExternalClaim) returns (MsgSendToExternalClaimResponse);

  rpc RequestBatch(MsgRequestBatch) returns (MsgRequestBatchResponse);
  rpc ConfirmBatch(MsgConfirmBatch) returns (MsgConfirmBatchResponse);
}

message MsgBondedOracle {
  string chain_name = 1;
  string oracle_address = 2;
  string bridger_address = 3;
  string external_address = 4;
  string validator_address = 5;
  cosmos.base.v1beta1.Coin delegate_amount = 6 [(gogoproto.nullable) = false];
}

message MsgBondedOracleResponse {}

message MsgAddDelegate {
  string chain_name = 1;
  string oracle_address = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

message MsgAddDelegateResponse {}

message MsgEditOracle {
  string chain_name = 1;
  string oracle_address = 2;
  string validator_address = 3;
}

message MsgEditOracleResponse {}

message MsgUnbondedOracle {
  string chain_name = 1;
  string oracle_address = 2;
}

message MsgUnbondedOracleResponse {}

message MsgWithdrawReward {
  string chain_name = 1;
  string oracle_address = 2;
}

message MsgWithdrawRewardResponse {}

// MsgOracleSetConfirm
// this is the message sent by the validators when they wish to submit their
// signatures over the validator set at a given block height. A validator must
// first call MsgSetEthAddress to set their Ethereum address to be used for
// signing. Then someone (anyone) must make a OracleSetRequest, the request is
// essentially a messaging mechanism to determine which block all validators
// should submit signatures over. Finally validators sign the validator set,
// powers, and Ethereum addresses of the entire validator set at the height of a
// OracleSetRequest and submit that signature with this message.
//
// If a sufficient number of validators (66% of voting power) (A) have set
// Ethereum addresses and (B) submit OracleSetConfirm messages with their
// signatures it is then possible for anyone to view these signatures in the
// chain store and submit them to Ethereum to update the validator set
// -------------
message MsgOracleSetConfirm {
  uint64 nonce = 1;
  string bridger_address = 2;
  string external_address = 3;
  string signature = 4;
  string chain_name = 5;
}

message MsgOracleSetConfirmResponse {}

// This informs the Cosmos module that a validator
// set has been updated.
message MsgOracleSetUpdatedClaim {
  uint64 event_nonce = 1;
  uint64 block_height = 2;
  uint64 oracle_set_nonce = 3;
  repeated BridgeValidator members = 4 [(gogoproto.nullable) = false];
  string bridger_address = 6;
  string chain_name = 7;
}

message MsgOracleSetUpdatedClaimResponse {}

// MsgSendToFxClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the bsc blockchain coins are
// issued to the Payment address in question
// -------------
message MsgSendToFxClaim {
  uint64 event_nonce = 1;
  uint64 block_height = 2;
  string token_contract = 3;
  string amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string sender = 5;
  string receiver = 6;
  string target_ibc = 7;
  string bridger_address = 8;
  string chain_name = 9;
}

message MsgSendToFxClaimResponse {}

// MsgSendToExternal
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Payment messages
// FEE:
// the fee paid for the bridge, distinct from the fee paid to the chain to
// actually send this message in the first place. So a successful send has
// two layers of fees for the user
message MsgSendToExternal {
  string sender = 1;
  string dest = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin bridge_fee = 4 [(gogoproto.nullable) = false];
  string chain_name = 5;
}

message MsgSendToExternalResponse {
  uint64 outgoing_tx_id = 1;
}

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToExternal and recieve a refund
// of the tokens
message MsgCancelSendToExternal {
  uint64 transaction_id = 1;
  string sender = 2;
  string chain_name = 3;
}

message MsgCancelSendToExternalResponse {}

// MsgRequestBatch
// this is a message anyone can send that requests a batch of transactions to
// send across the bridge be created for whatever block height this message is
// included in. This acts as a coordination point, the handler for this message
// looks at the AddToOutgoingPool tx's in the store and generates a batch, also
// available in the store tied to this message. The validators then grab this
// batch, sign it, submit the signatures with a MsgConfirmBatch before a relayer
// can finally submit the batch
// -------------
// feeReceive:
message MsgRequestBatch {
  string sender = 1;
  string denom = 2;
  string minimum_fee = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string fee_receive = 4;
  string chain_name = 5;
  string base_fee = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgRequestBatchResponse {
  uint64 batch_nonce = 1;
}

// MsgConfirmBatch
// When validators observe a MsgRequestBatch they form a batch by ordering
// transactions currently in the txqueue in order of highest to lowest fee,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (determine this without nondeterminism) This message includes the batch
// as well as an Bsc signature over this batch by the validator
// -------------
message MsgConfirmBatch {
  uint64 nonce = 1;
  string token_contract = 2;
  string bridger_address = 3;
  string external_address = 4;
  string signature = 5;
  string chain_name = 6;
}

message MsgConfirmBatchResponse {}

// SendToExternalClaim claims that a batch of withdrawal
// operations on the bridge contract was executed.
message MsgSendToExternalClaim {
  uint64 event_nonce = 1;
  uint64 block_height = 2;
  uint64 batch_nonce = 3;
  string token_contract = 4;
  string bridger_address = 5;
  string chain_name = 6;
}

message MsgSendToExternalClaimResponse {}

message MsgBridgeTokenClaim {
  uint64 event_nonce = 1;
  uint64 block_height = 2;
  string token_contract = 3;
  string name = 4;
  string symbol = 5;
  uint64 decimals = 6;
  string bridger_address = 7;
  string channel_ibc = 8; // Bridge Token channel IBC
  string chain_name = 9;
}

message MsgBridgeTokenClaimResponse {}
