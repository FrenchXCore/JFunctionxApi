/*
 * Tendermint RPC
 * Tendermint supports the following RPC protocols:  * URI over HTTP * JSON-RPC 2.0 over HTTP * JSON-RPC 2.0 over websockets (deprecated)  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A GET request with arguments encoded as query parameters:      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  In Tendermint v0.35 and earlier, JSONRPC requests can be also made via websocket.  The websocket interface is deprecated in Tendermint v0.36, and will be removed in v0.37.  The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. The RPC methods for event subscription (`subscribe`, `unsubscribe`, and `unsubscribe_all`) are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 
 *
 * The version of the OpenAPI document: Master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.api.tendermint;

import eu.frenchxcore.api.ApiCallback;
import eu.frenchxcore.api.ApiClient;
import eu.frenchxcore.api.ApiException;
import eu.frenchxcore.api.ApiResponse;
import eu.frenchxcore.api.Configuration;
import eu.frenchxcore.api.Pair;
import eu.frenchxcore.api.ProgressRequestBody;
import eu.frenchxcore.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.frenchxcore.model.tendermint.openapi.BlockResponse;
import eu.frenchxcore.model.tendermint.openapi.BlockResultsResponse;
import eu.frenchxcore.model.tendermint.openapi.BlockSearchResponse;
import eu.frenchxcore.model.tendermint.openapi.BlockchainResponse;
import eu.frenchxcore.model.tendermint.openapi.CommitResponse;
import eu.frenchxcore.model.tendermint.openapi.ConsensusParamsResponse;
import eu.frenchxcore.model.tendermint.openapi.ConsensusStateResponse;
import eu.frenchxcore.model.tendermint.openapi.DumpConsensusResponse;
import eu.frenchxcore.model.tendermint.openapi.EmptyResponse;
import eu.frenchxcore.model.tendermint.openapi.ErrorResponse;
import eu.frenchxcore.model.tendermint.openapi.GenesisChunkedResponse;
import eu.frenchxcore.model.tendermint.openapi.GenesisResponse;
import eu.frenchxcore.model.tendermint.openapi.HeaderResponse;
import eu.frenchxcore.model.tendermint.openapi.NetInfoResponse;
import eu.frenchxcore.model.tendermint.openapi.NumUnconfirmedTransactionsResponse;
import eu.frenchxcore.model.tendermint.openapi.StatusResponse;
import eu.frenchxcore.model.tendermint.openapi.TxResponse;
import eu.frenchxcore.model.tendermint.openapi.TxSearchResponse;
import eu.frenchxcore.model.tendermint.openapi.UnconfirmedTransactionsResponse;
import eu.frenchxcore.model.tendermint.openapi.ValidatorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InfoApi {
    private ApiClient localVarApiClient;

    public InfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for block
     * @param height height to return. If no height is provided, it will fetch the latest block. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCall(Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/block";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockValidateBeforeCall(Integer height, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockCall(height, _callback);
        return localVarCall;

    }

    /**
     * Get block at a specified height
     * Get Block. 
     * @param height height to return. If no height is provided, it will fetch the latest block. (optional, default to 0)
     * @return BlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BlockResponse block(Integer height) throws ApiException {
        ApiResponse<BlockResponse> localVarResp = blockWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * Get block at a specified height
     * Get Block. 
     * @param height height to return. If no height is provided, it will fetch the latest block. (optional, default to 0)
     * @return ApiResponse&lt;BlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockResponse> blockWithHttpInfo(Integer height) throws ApiException {
        okhttp3.Call localVarCall = blockValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<BlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get block at a specified height (asynchronously)
     * Get Block. 
     * @param height height to return. If no height is provided, it will fetch the latest block. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockAsync(Integer height, final ApiCallback<BlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<BlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockByHash
     * @param hash block hash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockByHashCall(String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/block_by_hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockByHashValidateBeforeCall(String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling blockByHash(Async)");
        }
        

        okhttp3.Call localVarCall = blockByHashCall(hash, _callback);
        return localVarCall;

    }

    /**
     * Get block by hash
     * Get Block By Hash. 
     * @param hash block hash (required)
     * @return BlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BlockResponse blockByHash(String hash) throws ApiException {
        ApiResponse<BlockResponse> localVarResp = blockByHashWithHttpInfo(hash);
        return localVarResp.getData();
    }

    /**
     * Get block by hash
     * Get Block By Hash. 
     * @param hash block hash (required)
     * @return ApiResponse&lt;BlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockResponse> blockByHashWithHttpInfo(String hash) throws ApiException {
        okhttp3.Call localVarCall = blockByHashValidateBeforeCall(hash, null);
        Type localVarReturnType = new TypeToken<BlockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get block by hash (asynchronously)
     * Get Block By Hash. 
     * @param hash block hash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockByHashAsync(String hash, final ApiCallback<BlockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockByHashValidateBeforeCall(hash, _callback);
        Type localVarReturnType = new TypeToken<BlockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockResults
     * @param height height to return. If no height is provided, it will fetch information regarding the latest block. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockResultsCall(Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/block_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockResultsValidateBeforeCall(Integer height, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockResultsCall(height, _callback);
        return localVarCall;

    }

    /**
     * Get block results at a specified height
     * Get block_results. 
     * @param height height to return. If no height is provided, it will fetch information regarding the latest block. (optional, default to 0)
     * @return BlockSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BlockSearchResponse blockResults(Integer height) throws ApiException {
        ApiResponse<BlockSearchResponse> localVarResp = blockResultsWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * Get block results at a specified height
     * Get block_results. 
     * @param height height to return. If no height is provided, it will fetch information regarding the latest block. (optional, default to 0)
     * @return ApiResponse&lt;BlockSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockSearchResponse> blockResultsWithHttpInfo(Integer height) throws ApiException {
        okhttp3.Call localVarCall = blockResultsValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<BlockSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get block results at a specified height (asynchronously)
     * Get block_results. 
     * @param height height to return. If no height is provided, it will fetch information regarding the latest block. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockResultsAsync(Integer height, final ApiCallback<BlockSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockResultsValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<BlockSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockSearch
     * @param query Query (required)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which blocks are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height. If empty, default sorting will be still applied. (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of paginated blocks matching the search criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockSearchCall(String query, Integer page, Integer perPage, String orderBy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/block_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockSearchValidateBeforeCall(String query, Integer page, Integer perPage, String orderBy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling blockSearch(Async)");
        }
        

        okhttp3.Call localVarCall = blockSearchCall(query, page, perPage, orderBy, _callback);
        return localVarCall;

    }

    /**
     * Search for blocks by BeginBlock and EndBlock events
     * Search for blocks by BeginBlock and EndBlock events.  See /subscribe for the query syntax. 
     * @param query Query (required)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which blocks are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height. If empty, default sorting will be still applied. (optional, default to desc)
     * @return BlockResultsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of paginated blocks matching the search criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BlockResultsResponse blockSearch(String query, Integer page, Integer perPage, String orderBy) throws ApiException {
        ApiResponse<BlockResultsResponse> localVarResp = blockSearchWithHttpInfo(query, page, perPage, orderBy);
        return localVarResp.getData();
    }

    /**
     * Search for blocks by BeginBlock and EndBlock events
     * Search for blocks by BeginBlock and EndBlock events.  See /subscribe for the query syntax. 
     * @param query Query (required)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which blocks are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height. If empty, default sorting will be still applied. (optional, default to desc)
     * @return ApiResponse&lt;BlockResultsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of paginated blocks matching the search criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockResultsResponse> blockSearchWithHttpInfo(String query, Integer page, Integer perPage, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = blockSearchValidateBeforeCall(query, page, perPage, orderBy, null);
        Type localVarReturnType = new TypeToken<BlockResultsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for blocks by BeginBlock and EndBlock events (asynchronously)
     * Search for blocks by BeginBlock and EndBlock events.  See /subscribe for the query syntax. 
     * @param query Query (required)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which blocks are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height. If empty, default sorting will be still applied. (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of paginated blocks matching the search criteria. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockSearchAsync(String query, Integer page, Integer perPage, String orderBy, final ApiCallback<BlockResultsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockSearchValidateBeforeCall(query, page, perPage, orderBy, _callback);
        Type localVarReturnType = new TypeToken<BlockResultsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blockchain
     * @param minHeight Minimum block height to return (optional)
     * @param maxHeight Maximum block height to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block headers, returned in descending order (highest first). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockchainCall(Integer minHeight, Integer maxHeight, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blockchain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minHeight", minHeight));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockchainValidateBeforeCall(Integer minHeight, Integer maxHeight, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blockchainCall(minHeight, maxHeight, _callback);
        return localVarCall;

    }

    /**
     * Get block headers (max: 20) for minHeight &lt;&#x3D; height &lt;&#x3D; maxHeight.
     * Get block headers for minHeight &lt;&#x3D; height maxHeight.  If maxHeight does not yet exist, blocks up to the current height will be returned. If minHeight does not exist (due to pruning), earliest existing height will be used.  At most 20 items will be returned. Block headers are returned in descending order (highest first). 
     * @param minHeight Minimum block height to return (optional)
     * @param maxHeight Maximum block height to return (optional)
     * @return BlockchainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block headers, returned in descending order (highest first). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BlockchainResponse blockchain(Integer minHeight, Integer maxHeight) throws ApiException {
        ApiResponse<BlockchainResponse> localVarResp = blockchainWithHttpInfo(minHeight, maxHeight);
        return localVarResp.getData();
    }

    /**
     * Get block headers (max: 20) for minHeight &lt;&#x3D; height &lt;&#x3D; maxHeight.
     * Get block headers for minHeight &lt;&#x3D; height maxHeight.  If maxHeight does not yet exist, blocks up to the current height will be returned. If minHeight does not exist (due to pruning), earliest existing height will be used.  At most 20 items will be returned. Block headers are returned in descending order (highest first). 
     * @param minHeight Minimum block height to return (optional)
     * @param maxHeight Maximum block height to return (optional)
     * @return ApiResponse&lt;BlockchainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block headers, returned in descending order (highest first). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockchainResponse> blockchainWithHttpInfo(Integer minHeight, Integer maxHeight) throws ApiException {
        okhttp3.Call localVarCall = blockchainValidateBeforeCall(minHeight, maxHeight, null);
        Type localVarReturnType = new TypeToken<BlockchainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get block headers (max: 20) for minHeight &lt;&#x3D; height &lt;&#x3D; maxHeight. (asynchronously)
     * Get block headers for minHeight &lt;&#x3D; height maxHeight.  If maxHeight does not yet exist, blocks up to the current height will be returned. If minHeight does not exist (due to pruning), earliest existing height will be used.  At most 20 items will be returned. Block headers are returned in descending order (highest first). 
     * @param minHeight Minimum block height to return (optional)
     * @param maxHeight Maximum block height to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block headers, returned in descending order (highest first). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockchainAsync(Integer minHeight, Integer maxHeight, final ApiCallback<BlockchainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockchainValidateBeforeCall(minHeight, maxHeight, _callback);
        Type localVarReturnType = new TypeToken<BlockchainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for commit
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results.  canonical switches from false to true for block H once block H+1 has been committed. Until then it&#39;s subjective and only reflects what this node has seen so far.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitCall(Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitValidateBeforeCall(Integer height, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = commitCall(height, _callback);
        return localVarCall;

    }

    /**
     * Get commit results at a specified height
     * Get Commit. 
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @return CommitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results.  canonical switches from false to true for block H once block H+1 has been committed. Until then it&#39;s subjective and only reflects what this node has seen so far.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CommitResponse commit(Integer height) throws ApiException {
        ApiResponse<CommitResponse> localVarResp = commitWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * Get commit results at a specified height
     * Get Commit. 
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @return ApiResponse&lt;CommitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results.  canonical switches from false to true for block H once block H+1 has been committed. Until then it&#39;s subjective and only reflects what this node has seen so far.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitResponse> commitWithHttpInfo(Integer height) throws ApiException {
        okhttp3.Call localVarCall = commitValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<CommitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get commit results at a specified height (asynchronously)
     * Get Commit. 
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results.  canonical switches from false to true for block H once block H+1 has been committed. Until then it&#39;s subjective and only reflects what this node has seen so far.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitAsync(Integer height, final ApiCallback<CommitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<CommitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consensusParams
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus parameters results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consensusParamsCall(Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consensus_params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consensusParamsValidateBeforeCall(Integer height, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = consensusParamsCall(height, _callback);
        return localVarCall;

    }

    /**
     * Get consensus parameters
     * Get consensus parameters. 
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @return ConsensusParamsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus parameters results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ConsensusParamsResponse consensusParams(Integer height) throws ApiException {
        ApiResponse<ConsensusParamsResponse> localVarResp = consensusParamsWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * Get consensus parameters
     * Get consensus parameters. 
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @return ApiResponse&lt;ConsensusParamsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus parameters results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsensusParamsResponse> consensusParamsWithHttpInfo(Integer height) throws ApiException {
        okhttp3.Call localVarCall = consensusParamsValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<ConsensusParamsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get consensus parameters (asynchronously)
     * Get consensus parameters. 
     * @param height height to return. If no height is provided, it will fetch commit information regarding the latest block. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus parameters results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consensusParamsAsync(Integer height, final ApiCallback<ConsensusParamsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = consensusParamsValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<ConsensusParamsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consensusState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus state results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consensusStateCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consensus_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consensusStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = consensusStateCall(_callback);
        return localVarCall;

    }

    /**
     * Get consensus state
     * Get consensus state.  Not safe to call from inside the ABCI application during a block execution. 
     * @return ConsensusStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus state results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ConsensusStateResponse consensusState() throws ApiException {
        ApiResponse<ConsensusStateResponse> localVarResp = consensusStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get consensus state
     * Get consensus state.  Not safe to call from inside the ABCI application during a block execution. 
     * @return ApiResponse&lt;ConsensusStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus state results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsensusStateResponse> consensusStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = consensusStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConsensusStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get consensus state (asynchronously)
     * Get consensus state.  Not safe to call from inside the ABCI application during a block execution. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> consensus state results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consensusStateAsync(final ApiCallback<ConsensusStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = consensusStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConsensusStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dumpConsensusState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Complete consensus state.  See https://pkg.go.dev/github.com/tendermint/tendermint/types?tab&#x3D;doc#Vote.String for Vote string description.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dumpConsensusStateCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dump_consensus_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dumpConsensusStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dumpConsensusStateCall(_callback);
        return localVarCall;

    }

    /**
     * Get consensus state
     * Get consensus state.  Not safe to call from inside the ABCI application during a block execution. 
     * @return DumpConsensusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Complete consensus state.  See https://pkg.go.dev/github.com/tendermint/tendermint/types?tab&#x3D;doc#Vote.String for Vote string description.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DumpConsensusResponse dumpConsensusState() throws ApiException {
        ApiResponse<DumpConsensusResponse> localVarResp = dumpConsensusStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get consensus state
     * Get consensus state.  Not safe to call from inside the ABCI application during a block execution. 
     * @return ApiResponse&lt;DumpConsensusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Complete consensus state.  See https://pkg.go.dev/github.com/tendermint/tendermint/types?tab&#x3D;doc#Vote.String for Vote string description.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DumpConsensusResponse> dumpConsensusStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dumpConsensusStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DumpConsensusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get consensus state (asynchronously)
     * Get consensus state.  Not safe to call from inside the ABCI application during a block execution. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Complete consensus state.  See https://pkg.go.dev/github.com/tendermint/tendermint/types?tab&#x3D;doc#Vote.String for Vote string description.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dumpConsensusStateAsync(final ApiCallback<DumpConsensusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dumpConsensusStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DumpConsensusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genesis
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genesisCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genesis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genesisValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = genesisCall(_callback);
        return localVarCall;

    }

    /**
     * Get Genesis
     * Get the genesis document. 
     * @return GenesisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GenesisResponse genesis() throws ApiException {
        ApiResponse<GenesisResponse> localVarResp = genesisWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Genesis
     * Get the genesis document. 
     * @return ApiResponse&lt;GenesisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenesisResponse> genesisWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = genesisValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GenesisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Genesis (asynchronously)
     * Get the genesis document. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genesisAsync(final ApiCallback<GenesisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = genesisValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GenesisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genesisChunked
     * @param chunkID Sequence number of the chunk to download. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genesisChunkedCall(Integer chunkID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genesis_chunked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chunkID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chunkID", chunkID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genesisChunkedValidateBeforeCall(Integer chunkID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = genesisChunkedCall(chunkID, _callback);
        return localVarCall;

    }

    /**
     * Get Genesis in paginated chunks
     * Get genesis document in a paginated/chunked format to make it easier to iterate through larger genesis structures. 
     * @param chunkID Sequence number of the chunk to download. (optional, default to 0)
     * @return GenesisChunkedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GenesisChunkedResponse genesisChunked(Integer chunkID) throws ApiException {
        ApiResponse<GenesisChunkedResponse> localVarResp = genesisChunkedWithHttpInfo(chunkID);
        return localVarResp.getData();
    }

    /**
     * Get Genesis in paginated chunks
     * Get genesis document in a paginated/chunked format to make it easier to iterate through larger genesis structures. 
     * @param chunkID Sequence number of the chunk to download. (optional, default to 0)
     * @return ApiResponse&lt;GenesisChunkedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenesisChunkedResponse> genesisChunkedWithHttpInfo(Integer chunkID) throws ApiException {
        okhttp3.Call localVarCall = genesisChunkedValidateBeforeCall(chunkID, null);
        Type localVarReturnType = new TypeToken<GenesisChunkedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Genesis in paginated chunks (asynchronously)
     * Get genesis document in a paginated/chunked format to make it easier to iterate through larger genesis structures. 
     * @param chunkID Sequence number of the chunk to download. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Genesis results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genesisChunkedAsync(Integer chunkID, final ApiCallback<GenesisChunkedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = genesisChunkedValidateBeforeCall(chunkID, _callback);
        Type localVarReturnType = new TypeToken<GenesisChunkedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for header
     * @param height height to return. If no height is provided, it will fetch the latest height. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headerCall(Integer height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/header";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headerValidateBeforeCall(Integer height, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = headerCall(height, _callback);
        return localVarCall;

    }

    /**
     * Get the header at a specified height
     * Retrieve the block header corresponding to a specified height. 
     * @param height height to return. If no height is provided, it will fetch the latest height. (optional, default to 0)
     * @return HeaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public HeaderResponse header(Integer height) throws ApiException {
        ApiResponse<HeaderResponse> localVarResp = headerWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * Get the header at a specified height
     * Retrieve the block header corresponding to a specified height. 
     * @param height height to return. If no height is provided, it will fetch the latest height. (optional, default to 0)
     * @return ApiResponse&lt;HeaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeaderResponse> headerWithHttpInfo(Integer height) throws ApiException {
        okhttp3.Call localVarCall = headerValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<HeaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the header at a specified height (asynchronously)
     * Retrieve the block header corresponding to a specified height. 
     * @param height height to return. If no height is provided, it will fetch the latest height. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headerAsync(Integer height, final ApiCallback<HeaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = headerValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<HeaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headerByHash
     * @param hash header hash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headerByHashCall(String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/header_by_hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headerByHashValidateBeforeCall(String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling headerByHash(Async)");
        }
        

        okhttp3.Call localVarCall = headerByHashCall(hash, _callback);
        return localVarCall;

    }

    /**
     * Get header by hash
     * Retrieve the block header corresponding to a block hash. 
     * @param hash header hash (required)
     * @return HeaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public HeaderResponse headerByHash(String hash) throws ApiException {
        ApiResponse<HeaderResponse> localVarResp = headerByHashWithHttpInfo(hash);
        return localVarResp.getData();
    }

    /**
     * Get header by hash
     * Retrieve the block header corresponding to a block hash. 
     * @param hash header hash (required)
     * @return ApiResponse&lt;HeaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeaderResponse> headerByHashWithHttpInfo(String hash) throws ApiException {
        okhttp3.Call localVarCall = headerByHashValidateBeforeCall(hash, null);
        Type localVarReturnType = new TypeToken<HeaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get header by hash (asynchronously)
     * Retrieve the block header corresponding to a block hash. 
     * @param hash header hash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Header information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headerByHashAsync(String hash, final ApiCallback<HeaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = headerByHashValidateBeforeCall(hash, _callback);
        Type localVarReturnType = new TypeToken<HeaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for health
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets Node Health </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = healthCall(_callback);
        return localVarCall;

    }

    /**
     * Node heartbeat
     * Get node health. Returns empty result (200 OK) on success, no response - in case of an error. 
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets Node Health </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public EmptyResponse health() throws ApiException {
        ApiResponse<EmptyResponse> localVarResp = healthWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Node heartbeat
     * Get node health. Returns empty result (200 OK) on success, no response - in case of an error. 
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets Node Health </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyResponse> healthWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Node heartbeat (asynchronously)
     * Get node health. Returns empty result (200 OK) on success, no response - in case of an error. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets Node Health </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for netInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call netInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/net_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call netInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = netInfoCall(_callback);
        return localVarCall;

    }

    /**
     * Network information
     * Get network info. 
     * @return NetInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public NetInfoResponse netInfo() throws ApiException {
        ApiResponse<NetInfoResponse> localVarResp = netInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Network information
     * Get network info. 
     * @return ApiResponse&lt;NetInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetInfoResponse> netInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = netInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Network information (asynchronously)
     * Get network info. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call netInfoAsync(final ApiCallback<NetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = netInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for numUnconfirmedTxs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status about unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numUnconfirmedTxsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/num_unconfirmed_txs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numUnconfirmedTxsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = numUnconfirmedTxsCall(_callback);
        return localVarCall;

    }

    /**
     * Get data about unconfirmed transactions
     * Get data about unconfirmed transactions 
     * @return NumUnconfirmedTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status about unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NumUnconfirmedTransactionsResponse numUnconfirmedTxs() throws ApiException {
        ApiResponse<NumUnconfirmedTransactionsResponse> localVarResp = numUnconfirmedTxsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get data about unconfirmed transactions
     * Get data about unconfirmed transactions 
     * @return ApiResponse&lt;NumUnconfirmedTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status about unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NumUnconfirmedTransactionsResponse> numUnconfirmedTxsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = numUnconfirmedTxsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NumUnconfirmedTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data about unconfirmed transactions (asynchronously)
     * Get data about unconfirmed transactions 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status about unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numUnconfirmedTxsAsync(final ApiCallback<NumUnconfirmedTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = numUnconfirmedTxsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NumUnconfirmedTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for status
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the node </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statusCall(_callback);
        return localVarCall;

    }

    /**
     * Node Status
     * Get Tendermint status including node info, pubkey, latest block hash, app hash, block height, current max peer height, and time. 
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the node </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse status() throws ApiException {
        ApiResponse<StatusResponse> localVarResp = statusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Node Status
     * Get Tendermint status including node info, pubkey, latest block hash, app hash, block height, current max peer height, and time. 
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the node </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> statusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = statusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Node Status (asynchronously)
     * Get Tendermint status including node info, pubkey, latest block hash, app hash, block height, current max peer height, and time. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the node </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusAsync(final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tx
     * @param hash transaction Hash to retrive (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txCall(String hash, Boolean prove, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (prove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prove", prove));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call txValidateBeforeCall(String hash, Boolean prove, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling tx(Async)");
        }
        

        okhttp3.Call localVarCall = txCall(hash, prove, _callback);
        return localVarCall;

    }

    /**
     * Get transactions by hash
     * Get a transaction 
     * @param hash transaction Hash to retrive (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @return TxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TxResponse tx(String hash, Boolean prove) throws ApiException {
        ApiResponse<TxResponse> localVarResp = txWithHttpInfo(hash, prove);
        return localVarResp.getData();
    }

    /**
     * Get transactions by hash
     * Get a transaction 
     * @param hash transaction Hash to retrive (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @return ApiResponse&lt;TxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxResponse> txWithHttpInfo(String hash, Boolean prove) throws ApiException {
        okhttp3.Call localVarCall = txValidateBeforeCall(hash, prove, null);
        Type localVarReturnType = new TypeToken<TxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transactions by hash (asynchronously)
     * Get a transaction 
     * @param hash transaction Hash to retrive (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txAsync(String hash, Boolean prove, final ApiCallback<TxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = txValidateBeforeCall(hash, prove, _callback);
        Type localVarReturnType = new TypeToken<TxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for txSearch
     * @param query Query (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which transactions are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height &amp; index. If empty, default sorting will be still applied. (optional, default to desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txSearchCall(String query, Boolean prove, Integer page, Integer perPage, String orderBy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tx_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (prove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prove", prove));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call txSearchValidateBeforeCall(String query, Boolean prove, Integer page, Integer perPage, String orderBy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling txSearch(Async)");
        }
        

        okhttp3.Call localVarCall = txSearchCall(query, prove, page, perPage, orderBy, _callback);
        return localVarCall;

    }

    /**
     * Search for transactions
     * Search for transactions w/ their results.  See /subscribe for the query syntax. 
     * @param query Query (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which transactions are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height &amp; index. If empty, default sorting will be still applied. (optional, default to desc)
     * @return TxSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TxSearchResponse txSearch(String query, Boolean prove, Integer page, Integer perPage, String orderBy) throws ApiException {
        ApiResponse<TxSearchResponse> localVarResp = txSearchWithHttpInfo(query, prove, page, perPage, orderBy);
        return localVarResp.getData();
    }

    /**
     * Search for transactions
     * Search for transactions w/ their results.  See /subscribe for the query syntax. 
     * @param query Query (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which transactions are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height &amp; index. If empty, default sorting will be still applied. (optional, default to desc)
     * @return ApiResponse&lt;TxSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxSearchResponse> txSearchWithHttpInfo(String query, Boolean prove, Integer page, Integer perPage, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = txSearchValidateBeforeCall(query, prove, page, perPage, orderBy, null);
        Type localVarReturnType = new TypeToken<TxSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for transactions (asynchronously)
     * Search for transactions w/ their results.  See /subscribe for the query syntax. 
     * @param query Query (required)
     * @param prove Include proofs of the transactions inclusion in the block (optional, default to false)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param orderBy Order in which transactions are sorted (\&quot;asc\&quot; or \&quot;desc\&quot;), by height &amp; index. If empty, default sorting will be still applied. (optional, default to desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txSearchAsync(String query, Boolean prove, Integer page, Integer perPage, String orderBy, final ApiCallback<TxSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = txSearchValidateBeforeCall(query, prove, page, perPage, orderBy, _callback);
        Type localVarReturnType = new TypeToken<TxSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unconfirmedTxs
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unconfirmedTxsCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unconfirmed_txs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unconfirmedTxsValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = unconfirmedTxsCall(page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get the list of unconfirmed transactions
     * Get list of unconfirmed transactions 
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @return UnconfirmedTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UnconfirmedTransactionsResponse unconfirmedTxs(Integer page, Integer perPage) throws ApiException {
        ApiResponse<UnconfirmedTransactionsResponse> localVarResp = unconfirmedTxsWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the list of unconfirmed transactions
     * Get list of unconfirmed transactions 
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @return ApiResponse&lt;UnconfirmedTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnconfirmedTransactionsResponse> unconfirmedTxsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = unconfirmedTxsValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<UnconfirmedTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of unconfirmed transactions (asynchronously)
     * Get list of unconfirmed transactions 
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unconfirmed transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unconfirmedTxsAsync(Integer page, Integer perPage, final ApiCallback<UnconfirmedTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unconfirmedTxsValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<UnconfirmedTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validators
     * @param height height to return. If no height is provided, it will fetch validator set which corresponds to the latest block. (optional, default to 0)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorsCall(Integer height, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorsValidateBeforeCall(Integer height, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validatorsCall(height, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get validator set at a specified height
     * Get Validators. Validators are sorted first by voting power (descending), then by address (ascending). 
     * @param height height to return. If no height is provided, it will fetch validator set which corresponds to the latest block. (optional, default to 0)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @return ValidatorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ValidatorsResponse validators(Integer height, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ValidatorsResponse> localVarResp = validatorsWithHttpInfo(height, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get validator set at a specified height
     * Get Validators. Validators are sorted first by voting power (descending), then by address (ascending). 
     * @param height height to return. If no height is provided, it will fetch validator set which corresponds to the latest block. (optional, default to 0)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @return ApiResponse&lt;ValidatorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatorsResponse> validatorsWithHttpInfo(Integer height, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = validatorsValidateBeforeCall(height, page, perPage, null);
        Type localVarReturnType = new TypeToken<ValidatorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get validator set at a specified height (asynchronously)
     * Get Validators. Validators are sorted first by voting power (descending), then by address (ascending). 
     * @param height height to return. If no height is provided, it will fetch validator set which corresponds to the latest block. (optional, default to 0)
     * @param page Page number (1-based) (optional, default to 1)
     * @param perPage Number of entries per page (max: 100) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Commit results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorsAsync(Integer height, Integer page, Integer perPage, final ApiCallback<ValidatorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorsValidateBeforeCall(height, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ValidatorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
