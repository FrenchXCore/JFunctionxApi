/*
 * Tendermint RPC
 * Tendermint supports the following RPC protocols:  * URI over HTTP * JSON-RPC 2.0 over HTTP * JSON-RPC 2.0 over websockets (deprecated)  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A GET request with arguments encoded as query parameters:      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  In Tendermint v0.35 and earlier, JSONRPC requests can be also made via websocket.  The websocket interface is deprecated in Tendermint v0.36, and will be removed in v0.37.  The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. The RPC methods for event subscription (`subscribe`, `unsubscribe`, and `unsubscribe_all`) are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 
 *
 * The version of the OpenAPI document: Master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.model.tendermint.openapi;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Channel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-11T15:53:21.538516500+02:00[Europe/Paris]")
public class Channel {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_SEND_QUEUE_CAPACITY = "SendQueueCapacity";
  @SerializedName(SERIALIZED_NAME_SEND_QUEUE_CAPACITY)
  private String sendQueueCapacity;

  public static final String SERIALIZED_NAME_SEND_QUEUE_SIZE = "SendQueueSize";
  @SerializedName(SERIALIZED_NAME_SEND_QUEUE_SIZE)
  private String sendQueueSize;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_RECENTLY_SENT = "RecentlySent";
  @SerializedName(SERIALIZED_NAME_RECENTLY_SENT)
  private String recentlySent;


  public Channel ID(Integer ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "48", value = "")

  public Integer getID() {
    return ID;
  }


  public void setID(Integer ID) {
    this.ID = ID;
  }


  public Channel sendQueueCapacity(String sendQueueCapacity) {
    
    this.sendQueueCapacity = sendQueueCapacity;
    return this;
  }

   /**
   * Get sendQueueCapacity
   * @return sendQueueCapacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public String getSendQueueCapacity() {
    return sendQueueCapacity;
  }


  public void setSendQueueCapacity(String sendQueueCapacity) {
    this.sendQueueCapacity = sendQueueCapacity;
  }


  public Channel sendQueueSize(String sendQueueSize) {
    
    this.sendQueueSize = sendQueueSize;
    return this;
  }

   /**
   * Get sendQueueSize
   * @return sendQueueSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public String getSendQueueSize() {
    return sendQueueSize;
  }


  public void setSendQueueSize(String sendQueueSize) {
    this.sendQueueSize = sendQueueSize;
  }


  public Channel priority(String priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "")

  public String getPriority() {
    return priority;
  }


  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Channel recentlySent(String recentlySent) {
    
    this.recentlySent = recentlySent;
    return this;
  }

   /**
   * Get recentlySent
   * @return recentlySent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public String getRecentlySent() {
    return recentlySent;
  }


  public void setRecentlySent(String recentlySent) {
    this.recentlySent = recentlySent;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.ID, channel.ID) &&
        Objects.equals(this.sendQueueCapacity, channel.sendQueueCapacity) &&
        Objects.equals(this.sendQueueSize, channel.sendQueueSize) &&
        Objects.equals(this.priority, channel.priority) &&
        Objects.equals(this.recentlySent, channel.recentlySent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, sendQueueCapacity, sendQueueSize, priority, recentlySent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    sendQueueCapacity: ").append(toIndentedString(sendQueueCapacity)).append("\n");
    sb.append("    sendQueueSize: ").append(toIndentedString(sendQueueSize)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    recentlySent: ").append(toIndentedString(recentlySent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

