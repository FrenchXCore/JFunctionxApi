/*
 * Tendermint RPC
 * Tendermint supports the following RPC protocols:  * URI over HTTP * JSON-RPC 2.0 over HTTP * JSON-RPC 2.0 over websockets (deprecated)  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A GET request with arguments encoded as query parameters:      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  In Tendermint v0.35 and earlier, JSONRPC requests can be also made via websocket.  The websocket interface is deprecated in Tendermint v0.36, and will be removed in v0.37.  The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. The RPC methods for event subscription (`subscribe`, `unsubscribe`, and `unsubscribe_all`) are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 
 *
 * The version of the OpenAPI document: Master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.model.tendermint.openapi;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ConsensusStateResponseResultRoundStateHeightVoteSet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-16T07:33:27.992268300+02:00[Europe/Paris]")
public class ConsensusStateResponseResultRoundStateHeightVoteSet {
  public static final String SERIALIZED_NAME_ROUND = "round";
  @SerializedName(SERIALIZED_NAME_ROUND)
  private Integer round;

  public static final String SERIALIZED_NAME_PREVOTES = "prevotes";
  @SerializedName(SERIALIZED_NAME_PREVOTES)
  private List<String> prevotes = null;

  public static final String SERIALIZED_NAME_PREVOTES_BIT_ARRAY = "prevotes_bit_array";
  @SerializedName(SERIALIZED_NAME_PREVOTES_BIT_ARRAY)
  private String prevotesBitArray;

  public static final String SERIALIZED_NAME_PRECOMMITS = "precommits";
  @SerializedName(SERIALIZED_NAME_PRECOMMITS)
  private List<String> precommits = null;

  public static final String SERIALIZED_NAME_PRECOMMITS_BIT_ARRAY = "precommits_bit_array";
  @SerializedName(SERIALIZED_NAME_PRECOMMITS_BIT_ARRAY)
  private String precommitsBitArray;


  public ConsensusStateResponseResultRoundStateHeightVoteSet round(Integer round) {
    
    this.round = round;
    return this;
  }

   /**
   * Get round
   * @return round
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getRound() {
    return round;
  }


  public void setRound(Integer round) {
    this.round = round;
  }


  public ConsensusStateResponseResultRoundStateHeightVoteSet prevotes(List<String> prevotes) {
    
    this.prevotes = prevotes;
    return this;
  }

  public ConsensusStateResponseResultRoundStateHeightVoteSet addPrevotesItem(String prevotesItem) {
    if (this.prevotes == null) {
      this.prevotes = new ArrayList<String>();
    }
    this.prevotes.add(prevotesItem);
    return this;
  }

   /**
   * Get prevotes
   * @return prevotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Vote{0:000001E443FD 1262197/00/1(Prevote) 634ADAF1F402 7BB974E1BA40 @ 2019-08-01T11:52:35.513572509Z}\",\"nil-Vote\"]", value = "")

  public List<String> getPrevotes() {
    return prevotes;
  }


  public void setPrevotes(List<String> prevotes) {
    this.prevotes = prevotes;
  }


  public ConsensusStateResponseResultRoundStateHeightVoteSet prevotesBitArray(String prevotesBitArray) {
    
    this.prevotesBitArray = prevotesBitArray;
    return this;
  }

   /**
   * Get prevotesBitArray
   * @return prevotesBitArray
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BA{100:xxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} 169753436/170151262 = 1.00", value = "")

  public String getPrevotesBitArray() {
    return prevotesBitArray;
  }


  public void setPrevotesBitArray(String prevotesBitArray) {
    this.prevotesBitArray = prevotesBitArray;
  }


  public ConsensusStateResponseResultRoundStateHeightVoteSet precommits(List<String> precommits) {
    
    this.precommits = precommits;
    return this;
  }

  public ConsensusStateResponseResultRoundStateHeightVoteSet addPrecommitsItem(String precommitsItem) {
    if (this.precommits == null) {
      this.precommits = new ArrayList<String>();
    }
    this.precommits.add(precommitsItem);
    return this;
  }

   /**
   * Get precommits
   * @return precommits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Vote{5:18C78D135C9D 1262197/00/2(Precommit) 634ADAF1F402 8B5EFFFEABCD @ 2019-08-01T11:52:36.25600005Z}\",\"nil-Vote\"]", value = "")

  public List<String> getPrecommits() {
    return precommits;
  }


  public void setPrecommits(List<String> precommits) {
    this.precommits = precommits;
  }


  public ConsensusStateResponseResultRoundStateHeightVoteSet precommitsBitArray(String precommitsBitArray) {
    
    this.precommitsBitArray = precommitsBitArray;
    return this;
  }

   /**
   * Get precommitsBitArray
   * @return precommitsBitArray
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BA{100:xxxxxx_xxxxx_xxxx_x_xxx_xx_xx_xx__x_x_x__xxxxxxxxxxxxxx_xxxx_xx_xxxxxx_xxxxxxxx_xxxx_xxx_x_xxxx__xxx} 118726247/170151262 = 0.70", value = "")

  public String getPrecommitsBitArray() {
    return precommitsBitArray;
  }


  public void setPrecommitsBitArray(String precommitsBitArray) {
    this.precommitsBitArray = precommitsBitArray;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsensusStateResponseResultRoundStateHeightVoteSet consensusStateResponseResultRoundStateHeightVoteSet = (ConsensusStateResponseResultRoundStateHeightVoteSet) o;
    return Objects.equals(this.round, consensusStateResponseResultRoundStateHeightVoteSet.round) &&
        Objects.equals(this.prevotes, consensusStateResponseResultRoundStateHeightVoteSet.prevotes) &&
        Objects.equals(this.prevotesBitArray, consensusStateResponseResultRoundStateHeightVoteSet.prevotesBitArray) &&
        Objects.equals(this.precommits, consensusStateResponseResultRoundStateHeightVoteSet.precommits) &&
        Objects.equals(this.precommitsBitArray, consensusStateResponseResultRoundStateHeightVoteSet.precommitsBitArray);
  }

  @Override
  public int hashCode() {
    return Objects.hash(round, prevotes, prevotesBitArray, precommits, precommitsBitArray);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsensusStateResponseResultRoundStateHeightVoteSet {\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("    prevotes: ").append(toIndentedString(prevotes)).append("\n");
    sb.append("    prevotesBitArray: ").append(toIndentedString(prevotesBitArray)).append("\n");
    sb.append("    precommits: ").append(toIndentedString(precommits)).append("\n");
    sb.append("    precommitsBitArray: ").append(toIndentedString(precommitsBitArray)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

