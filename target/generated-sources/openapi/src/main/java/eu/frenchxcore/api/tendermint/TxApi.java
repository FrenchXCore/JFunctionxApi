/*
 * Tendermint RPC
 * Tendermint supports the following RPC protocols:  * URI over HTTP * JSON-RPC 2.0 over HTTP * JSON-RPC 2.0 over websockets (deprecated)  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A GET request with arguments encoded as query parameters:      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  In Tendermint v0.35 and earlier, JSONRPC requests can be also made via websocket.  The websocket interface is deprecated in Tendermint v0.36, and will be removed in v0.37.  The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. The RPC methods for event subscription (`subscribe`, `unsubscribe`, and `unsubscribe_all`) are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 
 *
 * The version of the OpenAPI document: Master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.api.tendermint;

import eu.frenchxcore.api.ApiCallback;
import eu.frenchxcore.api.ApiClient;
import eu.frenchxcore.api.ApiException;
import eu.frenchxcore.api.ApiResponse;
import eu.frenchxcore.api.Configuration;
import eu.frenchxcore.api.Pair;
import eu.frenchxcore.api.ProgressRequestBody;
import eu.frenchxcore.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.frenchxcore.model.tendermint.openapi.BroadcastTxCommitResponse;
import eu.frenchxcore.model.tendermint.openapi.BroadcastTxResponse;
import eu.frenchxcore.model.tendermint.openapi.CheckTxResponse;
import eu.frenchxcore.model.tendermint.openapi.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TxApi {
    private ApiClient localVarApiClient;

    public TxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for broadcastTxAsync
     * @param tx The transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxAsyncCall(String tx, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/broadcast_tx_async";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx", tx));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call broadcastTxAsyncValidateBeforeCall(String tx, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tx' is set
        if (tx == null) {
            throw new ApiException("Missing the required parameter 'tx' when calling broadcastTxAsync(Async)");
        }
        

        okhttp3.Call localVarCall = broadcastTxAsyncCall(tx, _callback);
        return localVarCall;

    }

    /**
     * Returns right away, with no response. Does not wait for CheckTx nor DeliverTx results.
     * This method submits the transaction and returns immediately without waiting for the transaction to be checked (CheckTx) or committed.  Too know when the transaction is included in a block, you can check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return BroadcastTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastTxResponse broadcastTxAsync(String tx) throws ApiException {
        ApiResponse<BroadcastTxResponse> localVarResp = broadcastTxAsyncWithHttpInfo(tx);
        return localVarResp.getData();
    }

    /**
     * Returns right away, with no response. Does not wait for CheckTx nor DeliverTx results.
     * This method submits the transaction and returns immediately without waiting for the transaction to be checked (CheckTx) or committed.  Too know when the transaction is included in a block, you can check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return ApiResponse&lt;BroadcastTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastTxResponse> broadcastTxAsyncWithHttpInfo(String tx) throws ApiException {
        okhttp3.Call localVarCall = broadcastTxAsyncValidateBeforeCall(tx, null);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns right away, with no response. Does not wait for CheckTx nor DeliverTx results. (asynchronously)
     * This method submits the transaction and returns immediately without waiting for the transaction to be checked (CheckTx) or committed.  Too know when the transaction is included in a block, you can check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxAsyncAsync(String tx, final ApiCallback<BroadcastTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = broadcastTxAsyncValidateBeforeCall(tx, _callback);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for broadcastTxCommit
     * @param tx The transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxCommitCall(String tx, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/broadcast_tx_commit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx", tx));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call broadcastTxCommitValidateBeforeCall(String tx, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tx' is set
        if (tx == null) {
            throw new ApiException("Missing the required parameter 'tx' when calling broadcastTxCommit(Async)");
        }
        

        okhttp3.Call localVarCall = broadcastTxCommitCall(tx, _callback);
        return localVarCall;

    }

    /**
     * Returns with the responses from CheckTx and DeliverTx.
     * This method waits for the transaction to be checked (CheckTx) and makes a best effort to wait for it to be committed into a block before returning.  It will report an error if the request times out before the transaction commits.  If CheckTx or DeliverTx fails, the RPC will succeed and report the failing (non-zero) ABCI result code.  WARNING: Use this only for testing and development. For production use, call broadcast_tx_sync or broadcast_tx_async.  To know when a transaction is included in a block, check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return BroadcastTxCommitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastTxCommitResponse broadcastTxCommit(String tx) throws ApiException {
        ApiResponse<BroadcastTxCommitResponse> localVarResp = broadcastTxCommitWithHttpInfo(tx);
        return localVarResp.getData();
    }

    /**
     * Returns with the responses from CheckTx and DeliverTx.
     * This method waits for the transaction to be checked (CheckTx) and makes a best effort to wait for it to be committed into a block before returning.  It will report an error if the request times out before the transaction commits.  If CheckTx or DeliverTx fails, the RPC will succeed and report the failing (non-zero) ABCI result code.  WARNING: Use this only for testing and development. For production use, call broadcast_tx_sync or broadcast_tx_async.  To know when a transaction is included in a block, check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return ApiResponse&lt;BroadcastTxCommitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastTxCommitResponse> broadcastTxCommitWithHttpInfo(String tx) throws ApiException {
        okhttp3.Call localVarCall = broadcastTxCommitValidateBeforeCall(tx, null);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns with the responses from CheckTx and DeliverTx. (asynchronously)
     * This method waits for the transaction to be checked (CheckTx) and makes a best effort to wait for it to be committed into a block before returning.  It will report an error if the request times out before the transaction commits.  If CheckTx or DeliverTx fails, the RPC will succeed and report the failing (non-zero) ABCI result code.  WARNING: Use this only for testing and development. For production use, call broadcast_tx_sync or broadcast_tx_async.  To know when a transaction is included in a block, check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxCommitAsync(String tx, final ApiCallback<BroadcastTxCommitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = broadcastTxCommitValidateBeforeCall(tx, _callback);
        Type localVarReturnType = new TypeToken<BroadcastTxCommitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for broadcastTxSync
     * @param tx The transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxSyncCall(String tx, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/broadcast_tx_sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx", tx));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call broadcastTxSyncValidateBeforeCall(String tx, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tx' is set
        if (tx == null) {
            throw new ApiException("Missing the required parameter 'tx' when calling broadcastTxSync(Async)");
        }
        

        okhttp3.Call localVarCall = broadcastTxSyncCall(tx, _callback);
        return localVarCall;

    }

    /**
     * Returns with the response from CheckTx. Does not wait for DeliverTx result.
     * This method blocks until CheckTx returns and reports its result, but does not wait for the transaction to be included in a block. To know when the transaction is included in a block, check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return BroadcastTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastTxResponse broadcastTxSync(String tx) throws ApiException {
        ApiResponse<BroadcastTxResponse> localVarResp = broadcastTxSyncWithHttpInfo(tx);
        return localVarResp.getData();
    }

    /**
     * Returns with the response from CheckTx. Does not wait for DeliverTx result.
     * This method blocks until CheckTx returns and reports its result, but does not wait for the transaction to be included in a block. To know when the transaction is included in a block, check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return ApiResponse&lt;BroadcastTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastTxResponse> broadcastTxSyncWithHttpInfo(String tx) throws ApiException {
        okhttp3.Call localVarCall = broadcastTxSyncValidateBeforeCall(tx, null);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns with the response from CheckTx. Does not wait for DeliverTx result. (asynchronously)
     * This method blocks until CheckTx returns and reports its result, but does not wait for the transaction to be included in a block. To know when the transaction is included in a block, check for the transaction event using JSON-RPC.  See https://docs.tendermint.com/master/app-dev/subscribing-to-events-via-websocket.html  See https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxSyncAsync(String tx, final ApiCallback<BroadcastTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = broadcastTxSyncValidateBeforeCall(tx, _callback);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkTx
     * @param tx The transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ABCI application&#39;s CheckTx response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTxCall(String tx, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_tx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tx != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx", tx));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkTxValidateBeforeCall(String tx, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tx' is set
        if (tx == null) {
            throw new ApiException("Missing the required parameter 'tx' when calling checkTx(Async)");
        }
        

        okhttp3.Call localVarCall = checkTxCall(tx, _callback);
        return localVarCall;

    }

    /**
     * Checks the transaction without executing it.
     * The transaction won\\&#39;t be added to the mempool.  Please refer to https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return CheckTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ABCI application&#39;s CheckTx response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTxResponse checkTx(String tx) throws ApiException {
        ApiResponse<CheckTxResponse> localVarResp = checkTxWithHttpInfo(tx);
        return localVarResp.getData();
    }

    /**
     * Checks the transaction without executing it.
     * The transaction won\\&#39;t be added to the mempool.  Please refer to https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @return ApiResponse&lt;CheckTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ABCI application&#39;s CheckTx response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTxResponse> checkTxWithHttpInfo(String tx) throws ApiException {
        okhttp3.Call localVarCall = checkTxValidateBeforeCall(tx, null);
        Type localVarReturnType = new TypeToken<CheckTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the transaction without executing it. (asynchronously)
     * The transaction won\\&#39;t be added to the mempool.  Please refer to https://docs.tendermint.com/master/tendermint-core/using-tendermint.html#formatting for formatting/encoding rules. 
     * @param tx The transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ABCI application&#39;s CheckTx response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkTxAsync(String tx, final ApiCallback<CheckTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkTxValidateBeforeCall(tx, _callback);
        Type localVarReturnType = new TypeToken<CheckTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
