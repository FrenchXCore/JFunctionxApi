/*
 * Cosmos SDK - gRPC Gateway docs
 * A REST interface for state queries
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.api.cosmossdk;

import eu.frenchxcore.api.ApiCallback;
import eu.frenchxcore.api.ApiClient;
import eu.frenchxcore.api.ApiException;
import eu.frenchxcore.api.ApiResponse;
import eu.frenchxcore.api.Configuration;
import eu.frenchxcore.api.Pair;
import eu.frenchxcore.api.ProgressRequestBody;
import eu.frenchxcore.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse200;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2001;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20016;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20017;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20018;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20019;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2002;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20020;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20021;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20022;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20023;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20024;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20025;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20026;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20027;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20028;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20029;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2003;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20030;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20031;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20032;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20033;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20034;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20035;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20036;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20037;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20038;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20039;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2004;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20040;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20041;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20042;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20043;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20044;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20045;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20046;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20047;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20048;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2005;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20051;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20052;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20053;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20054;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20055;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20056;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20057;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2006;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2007;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2008;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse2009;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponseDefault;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponseDefault1;
import eu.frenchxcore.model.cosmossdk.openapi.QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod;
import eu.frenchxcore.model.cosmossdk.openapi.QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApi {
    private ApiClient localVarApiClient;

    public QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for account
     * @param address address defines the address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCall(String address, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/auth/v1beta1/accounts/{address}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling account(Async)");
        }
        

        okhttp3.Call localVarCall = accountCall(address, _callback);
        return localVarCall;

    }

    /**
     * Account returns account details based on address.
     * 
     * @param address address defines the address to query for. (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 account(String address) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = accountWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Account returns account details based on address.
     * 
     * @param address address defines the address to query for. (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> accountWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = accountValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Account returns account details based on address. (asynchronously)
     * 
     * @param address address defines the address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountAsync(String address, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accounts
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/auth/v1beta1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsValidateBeforeCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountsCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Accounts returns all the existing accounts
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 accounts(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = accountsWithHttpInfo(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Accounts returns all the existing accounts
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> accountsWithHttpInfo(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = accountsValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accounts returns all the existing accounts (asynchronously)
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAsync(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allBalances
     * @param address address is the address to query balances for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allBalancesCall(String address, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/balances/{address}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allBalancesValidateBeforeCall(String address, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling allBalances(Async)");
        }
        

        okhttp3.Call localVarCall = allBalancesCall(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * AllBalances queries the balance of all coins for a single account.
     * 
     * @param address address is the address to query balances for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 allBalances(String address, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = allBalancesWithHttpInfo(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * AllBalances queries the balance of all coins for a single account.
     * 
     * @param address address is the address to query balances for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> allBalancesWithHttpInfo(String address, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = allBalancesValidateBeforeCall(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AllBalances queries the balance of all coins for a single account. (asynchronously)
     * 
     * @param address address is the address to query balances for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allBalancesAsync(String address, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = allBalancesValidateBeforeCall(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allEvidence
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allEvidenceCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/evidence/v1beta1/evidence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allEvidenceValidateBeforeCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = allEvidenceCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * AllEvidence queries all evidence.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20024
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20024 allEvidence(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20024> localVarResp = allEvidenceWithHttpInfo(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * AllEvidence queries all evidence.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20024&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20024> allEvidenceWithHttpInfo(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = allEvidenceValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AllEvidence queries all evidence. (asynchronously)
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allEvidenceAsync(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20024> _callback) throws ApiException {

        okhttp3.Call localVarCall = allEvidenceValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allowance
     * @param granter granter is the address of the user granting an allowance of their funds. (required)
     * @param grantee grantee is the address of the user being granted an allowance of another user&#39;s funds. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowanceCall(String granter, String grantee, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}"
            .replaceAll("\\{" + "granter" + "\\}", localVarApiClient.escapeString(granter.toString()))
            .replaceAll("\\{" + "grantee" + "\\}", localVarApiClient.escapeString(grantee.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allowanceValidateBeforeCall(String granter, String grantee, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'granter' is set
        if (granter == null) {
            throw new ApiException("Missing the required parameter 'granter' when calling allowance(Async)");
        }
        
        // verify the required parameter 'grantee' is set
        if (grantee == null) {
            throw new ApiException("Missing the required parameter 'grantee' when calling allowance(Async)");
        }
        

        okhttp3.Call localVarCall = allowanceCall(granter, grantee, _callback);
        return localVarCall;

    }

    /**
     * Allowance returns fee granted to the grantee by the granter.
     * 
     * @param granter granter is the address of the user granting an allowance of their funds. (required)
     * @param grantee grantee is the address of the user being granted an allowance of another user&#39;s funds. (required)
     * @return InlineResponse20056
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20056 allowance(String granter, String grantee) throws ApiException {
        ApiResponse<InlineResponse20056> localVarResp = allowanceWithHttpInfo(granter, grantee);
        return localVarResp.getData();
    }

    /**
     * Allowance returns fee granted to the grantee by the granter.
     * 
     * @param granter granter is the address of the user granting an allowance of their funds. (required)
     * @param grantee grantee is the address of the user being granted an allowance of another user&#39;s funds. (required)
     * @return ApiResponse&lt;InlineResponse20056&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20056> allowanceWithHttpInfo(String granter, String grantee) throws ApiException {
        okhttp3.Call localVarCall = allowanceValidateBeforeCall(granter, grantee, null);
        Type localVarReturnType = new TypeToken<InlineResponse20056>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allowance returns fee granted to the grantee by the granter. (asynchronously)
     * 
     * @param granter granter is the address of the user granting an allowance of their funds. (required)
     * @param grantee grantee is the address of the user being granted an allowance of another user&#39;s funds. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowanceAsync(String granter, String grantee, final ApiCallback<InlineResponse20056> _callback) throws ApiException {

        okhttp3.Call localVarCall = allowanceValidateBeforeCall(granter, grantee, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20056>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allowances
     * @param grantee  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowancesCall(String grantee, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/feegrant/v1beta1/allowances/{grantee}"
            .replaceAll("\\{" + "grantee" + "\\}", localVarApiClient.escapeString(grantee.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allowancesValidateBeforeCall(String grantee, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'grantee' is set
        if (grantee == null) {
            throw new ApiException("Missing the required parameter 'grantee' when calling allowances(Async)");
        }
        

        okhttp3.Call localVarCall = allowancesCall(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Allowances returns all the grants for address.
     * 
     * @param grantee  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20057
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20057 allowances(String grantee, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20057> localVarResp = allowancesWithHttpInfo(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Allowances returns all the grants for address.
     * 
     * @param grantee  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20057&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20057> allowancesWithHttpInfo(String grantee, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = allowancesValidateBeforeCall(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20057>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allowances returns all the grants for address. (asynchronously)
     * 
     * @param grantee  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowancesAsync(String grantee, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20057> _callback) throws ApiException {

        okhttp3.Call localVarCall = allowancesValidateBeforeCall(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20057>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annualProvisions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annualProvisionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/mint/v1beta1/annual_provisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annualProvisionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = annualProvisionsCall(_callback);
        return localVarCall;

    }

    /**
     * AnnualProvisions current minting annual provisions value.
     * 
     * @return InlineResponse20034
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20034 annualProvisions() throws ApiException {
        ApiResponse<InlineResponse20034> localVarResp = annualProvisionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * AnnualProvisions current minting annual provisions value.
     * 
     * @return ApiResponse&lt;InlineResponse20034&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20034> annualProvisionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = annualProvisionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20034>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AnnualProvisions current minting annual provisions value. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annualProvisionsAsync(final ApiCallback<InlineResponse20034> _callback) throws ApiException {

        okhttp3.Call localVarCall = annualProvisionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20034>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appliedPlan
     * @param name name is the name of the applied plan to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appliedPlanCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/upgrade/v1beta1/applied_plan/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appliedPlanValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appliedPlan(Async)");
        }
        

        okhttp3.Call localVarCall = appliedPlanCall(name, _callback);
        return localVarCall;

    }

    /**
     * AppliedPlan queries a previously applied upgrade plan by its name.
     * 
     * @param name name is the name of the applied plan to query for. (required)
     * @return InlineResponse20051
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20051 appliedPlan(String name) throws ApiException {
        ApiResponse<InlineResponse20051> localVarResp = appliedPlanWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * AppliedPlan queries a previously applied upgrade plan by its name.
     * 
     * @param name name is the name of the applied plan to query for. (required)
     * @return ApiResponse&lt;InlineResponse20051&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20051> appliedPlanWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = appliedPlanValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<InlineResponse20051>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AppliedPlan queries a previously applied upgrade plan by its name. (asynchronously)
     * 
     * @param name name is the name of the applied plan to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appliedPlanAsync(String name, final ApiCallback<InlineResponse20051> _callback) throws ApiException {

        okhttp3.Call localVarCall = appliedPlanValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20051>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authParams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authParamsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/auth/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authParamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = authParamsCall(_callback);
        return localVarCall;

    }

    /**
     * Params queries all parameters.
     * 
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 authParams() throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = authParamsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Params queries all parameters.
     * 
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> authParamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = authParamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params queries all parameters. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authParamsAsync(final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = authParamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for balance
     * @param address address is the address to query balances for. (required)
     * @param denom denom is the coin denom to query balances for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceCall(String address, String denom, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/balances/{address}/{denom}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()))
            .replaceAll("\\{" + "denom" + "\\}", localVarApiClient.escapeString(denom.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balanceValidateBeforeCall(String address, String denom, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling balance(Async)");
        }
        
        // verify the required parameter 'denom' is set
        if (denom == null) {
            throw new ApiException("Missing the required parameter 'denom' when calling balance(Async)");
        }
        

        okhttp3.Call localVarCall = balanceCall(address, denom, _callback);
        return localVarCall;

    }

    /**
     * Balance queries the balance of a single coin for a single account.
     * 
     * @param address address is the address to query balances for. (required)
     * @param denom denom is the coin denom to query balances for. (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 balance(String address, String denom) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = balanceWithHttpInfo(address, denom);
        return localVarResp.getData();
    }

    /**
     * Balance queries the balance of a single coin for a single account.
     * 
     * @param address address is the address to query balances for. (required)
     * @param denom denom is the coin denom to query balances for. (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> balanceWithHttpInfo(String address, String denom) throws ApiException {
        okhttp3.Call localVarCall = balanceValidateBeforeCall(address, denom, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Balance queries the balance of a single coin for a single account. (asynchronously)
     * 
     * @param address address is the address to query balances for. (required)
     * @param denom denom is the coin denom to query balances for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceAsync(String address, String denom, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = balanceValidateBeforeCall(address, denom, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankParams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankParamsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankParamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = bankParamsCall(_callback);
        return localVarCall;

    }

    /**
     * Params queries the parameters of x/bank module.
     * 
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2008 bankParams() throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = bankParamsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Params queries the parameters of x/bank module.
     * 
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2008> bankParamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bankParamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params queries the parameters of x/bank module. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bankParamsAsync(final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankParamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communityPool
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityPoolCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/community_pool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communityPoolValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = communityPoolCall(_callback);
        return localVarCall;

    }

    /**
     * CommunityPool queries the community pool coins.
     * 
     * @return InlineResponse20016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20016 communityPool() throws ApiException {
        ApiResponse<InlineResponse20016> localVarResp = communityPoolWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * CommunityPool queries the community pool coins.
     * 
     * @return ApiResponse&lt;InlineResponse20016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20016> communityPoolWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = communityPoolValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CommunityPool queries the community pool coins. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityPoolAsync(final ApiCallback<InlineResponse20016> _callback) throws ApiException {

        okhttp3.Call localVarCall = communityPoolValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentPlan
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentPlanCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/upgrade/v1beta1/current_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentPlanValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = currentPlanCall(_callback);
        return localVarCall;

    }

    /**
     * CurrentPlan queries the current upgrade plan.
     * 
     * @return InlineResponse20052
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20052 currentPlan() throws ApiException {
        ApiResponse<InlineResponse20052> localVarResp = currentPlanWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * CurrentPlan queries the current upgrade plan.
     * 
     * @return ApiResponse&lt;InlineResponse20052&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20052> currentPlanWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = currentPlanValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20052>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CurrentPlan queries the current upgrade plan. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentPlanAsync(final ApiCallback<InlineResponse20052> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentPlanValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20052>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegation
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationCall(String validatorAddr, String delegatorAddr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}"
            .replaceAll("\\{" + "validator_addr" + "\\}", localVarApiClient.escapeString(validatorAddr.toString()))
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegationValidateBeforeCall(String validatorAddr, String delegatorAddr, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling delegation(Async)");
        }
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling delegation(Async)");
        }
        

        okhttp3.Call localVarCall = delegationCall(validatorAddr, delegatorAddr, _callback);
        return localVarCall;

    }

    /**
     * Delegation queries delegate info for given validator delegator pair.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20046 delegation(String validatorAddr, String delegatorAddr) throws ApiException {
        ApiResponse<InlineResponse20046> localVarResp = delegationWithHttpInfo(validatorAddr, delegatorAddr);
        return localVarResp.getData();
    }

    /**
     * Delegation queries delegate info for given validator delegator pair.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20046> delegationWithHttpInfo(String validatorAddr, String delegatorAddr) throws ApiException {
        okhttp3.Call localVarCall = delegationValidateBeforeCall(validatorAddr, delegatorAddr, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delegation queries delegate info for given validator delegator pair. (asynchronously)
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationAsync(String validatorAddr, String delegatorAddr, final ApiCallback<InlineResponse20046> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegationValidateBeforeCall(validatorAddr, delegatorAddr, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegationRewards
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationRewardsCall(String delegatorAddress, String validatorAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}"
            .replaceAll("\\{" + "delegator_address" + "\\}", localVarApiClient.escapeString(delegatorAddress.toString()))
            .replaceAll("\\{" + "validator_address" + "\\}", localVarApiClient.escapeString(validatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegationRewardsValidateBeforeCall(String delegatorAddress, String validatorAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddress' is set
        if (delegatorAddress == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddress' when calling delegationRewards(Async)");
        }
        
        // verify the required parameter 'validatorAddress' is set
        if (validatorAddress == null) {
            throw new ApiException("Missing the required parameter 'validatorAddress' when calling delegationRewards(Async)");
        }
        

        okhttp3.Call localVarCall = delegationRewardsCall(delegatorAddress, validatorAddress, _callback);
        return localVarCall;

    }

    /**
     * DelegationRewards queries the total rewards accrued by a delegation.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @return InlineResponse20018
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20018 delegationRewards(String delegatorAddress, String validatorAddress) throws ApiException {
        ApiResponse<InlineResponse20018> localVarResp = delegationRewardsWithHttpInfo(delegatorAddress, validatorAddress);
        return localVarResp.getData();
    }

    /**
     * DelegationRewards queries the total rewards accrued by a delegation.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20018&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20018> delegationRewardsWithHttpInfo(String delegatorAddress, String validatorAddress) throws ApiException {
        okhttp3.Call localVarCall = delegationRewardsValidateBeforeCall(delegatorAddress, validatorAddress, null);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegationRewards queries the total rewards accrued by a delegation. (asynchronously)
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationRewardsAsync(String delegatorAddress, String validatorAddress, final ApiCallback<InlineResponse20018> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegationRewardsValidateBeforeCall(delegatorAddress, validatorAddress, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegationTotalRewards
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationTotalRewardsCall(String delegatorAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards"
            .replaceAll("\\{" + "delegator_address" + "\\}", localVarApiClient.escapeString(delegatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegationTotalRewardsValidateBeforeCall(String delegatorAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddress' is set
        if (delegatorAddress == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddress' when calling delegationTotalRewards(Async)");
        }
        

        okhttp3.Call localVarCall = delegationTotalRewardsCall(delegatorAddress, _callback);
        return localVarCall;

    }

    /**
     * DelegationTotalRewards queries the total rewards accrued by a each validator.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20017 delegationTotalRewards(String delegatorAddress) throws ApiException {
        ApiResponse<InlineResponse20017> localVarResp = delegationTotalRewardsWithHttpInfo(delegatorAddress);
        return localVarResp.getData();
    }

    /**
     * DelegationTotalRewards queries the total rewards accrued by a each validator.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20017> delegationTotalRewardsWithHttpInfo(String delegatorAddress) throws ApiException {
        okhttp3.Call localVarCall = delegationTotalRewardsValidateBeforeCall(delegatorAddress, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegationTotalRewards queries the total rewards accrued by a each validator. (asynchronously)
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationTotalRewardsAsync(String delegatorAddress, final ApiCallback<InlineResponse20017> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegationTotalRewardsValidateBeforeCall(delegatorAddress, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegatorDelegations
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorDelegationsCall(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/delegations/{delegator_addr}"
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegatorDelegationsValidateBeforeCall(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling delegatorDelegations(Async)");
        }
        

        okhttp3.Call localVarCall = delegatorDelegationsCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * DelegatorDelegations queries all delegations of a given delegator address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20038
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20038 delegatorDelegations(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20038> localVarResp = delegatorDelegationsWithHttpInfo(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * DelegatorDelegations queries all delegations of a given delegator address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20038&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20038> delegatorDelegationsWithHttpInfo(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = delegatorDelegationsValidateBeforeCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegatorDelegations queries all delegations of a given delegator address. (asynchronously)
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorDelegationsAsync(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20038> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegatorDelegationsValidateBeforeCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegatorUnbondingDelegations
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorUnbondingDelegationsCall(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations"
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegatorUnbondingDelegationsValidateBeforeCall(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling delegatorUnbondingDelegations(Async)");
        }
        

        okhttp3.Call localVarCall = delegatorUnbondingDelegationsCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20040
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20040 delegatorUnbondingDelegations(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20040> localVarResp = delegatorUnbondingDelegationsWithHttpInfo(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20040&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20040> delegatorUnbondingDelegationsWithHttpInfo(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = delegatorUnbondingDelegationsValidateBeforeCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address. (asynchronously)
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorUnbondingDelegationsAsync(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20040> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegatorUnbondingDelegationsValidateBeforeCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20040>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegatorValidator
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorValidatorCall(String delegatorAddr, String validatorAddr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}"
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()))
            .replaceAll("\\{" + "validator_addr" + "\\}", localVarApiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegatorValidatorValidateBeforeCall(String delegatorAddr, String validatorAddr, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling delegatorValidator(Async)");
        }
        
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling delegatorValidator(Async)");
        }
        

        okhttp3.Call localVarCall = delegatorValidatorCall(delegatorAddr, validatorAddr, _callback);
        return localVarCall;

    }

    /**
     * DelegatorValidator queries validator info for given delegator validator pair.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @return InlineResponse20042
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20042 delegatorValidator(String delegatorAddr, String validatorAddr) throws ApiException {
        ApiResponse<InlineResponse20042> localVarResp = delegatorValidatorWithHttpInfo(delegatorAddr, validatorAddr);
        return localVarResp.getData();
    }

    /**
     * DelegatorValidator queries validator info for given delegator validator pair.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20042&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20042> delegatorValidatorWithHttpInfo(String delegatorAddr, String validatorAddr) throws ApiException {
        okhttp3.Call localVarCall = delegatorValidatorValidateBeforeCall(delegatorAddr, validatorAddr, null);
        Type localVarReturnType = new TypeToken<InlineResponse20042>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegatorValidator queries validator info for given delegator validator pair. (asynchronously)
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorValidatorAsync(String delegatorAddr, String validatorAddr, final ApiCallback<InlineResponse20042> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegatorValidatorValidateBeforeCall(delegatorAddr, validatorAddr, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20042>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegatorValidators
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorValidatorsCall(String delegatorAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators"
            .replaceAll("\\{" + "delegator_address" + "\\}", localVarApiClient.escapeString(delegatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegatorValidatorsValidateBeforeCall(String delegatorAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddress' is set
        if (delegatorAddress == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddress' when calling delegatorValidators(Async)");
        }
        

        okhttp3.Call localVarCall = delegatorValidatorsCall(delegatorAddress, _callback);
        return localVarCall;

    }

    /**
     * DelegatorValidators queries the validators of a delegator.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @return InlineResponse20019
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20019 delegatorValidators(String delegatorAddress) throws ApiException {
        ApiResponse<InlineResponse20019> localVarResp = delegatorValidatorsWithHttpInfo(delegatorAddress);
        return localVarResp.getData();
    }

    /**
     * DelegatorValidators queries the validators of a delegator.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20019&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20019> delegatorValidatorsWithHttpInfo(String delegatorAddress) throws ApiException {
        okhttp3.Call localVarCall = delegatorValidatorsValidateBeforeCall(delegatorAddress, null);
        Type localVarReturnType = new TypeToken<InlineResponse20019>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegatorValidators queries the validators of a delegator. (asynchronously)
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorValidatorsAsync(String delegatorAddress, final ApiCallback<InlineResponse20019> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegatorValidatorsValidateBeforeCall(delegatorAddress, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20019>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegatorWithdrawAddress
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorWithdrawAddressCall(String delegatorAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address"
            .replaceAll("\\{" + "delegator_address" + "\\}", localVarApiClient.escapeString(delegatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegatorWithdrawAddressValidateBeforeCall(String delegatorAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddress' is set
        if (delegatorAddress == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddress' when calling delegatorWithdrawAddress(Async)");
        }
        

        okhttp3.Call localVarCall = delegatorWithdrawAddressCall(delegatorAddress, _callback);
        return localVarCall;

    }

    /**
     * DelegatorWithdrawAddress queries withdraw address of a delegator.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @return InlineResponse20020
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20020 delegatorWithdrawAddress(String delegatorAddress) throws ApiException {
        ApiResponse<InlineResponse20020> localVarResp = delegatorWithdrawAddressWithHttpInfo(delegatorAddress);
        return localVarResp.getData();
    }

    /**
     * DelegatorWithdrawAddress queries withdraw address of a delegator.
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20020&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20020> delegatorWithdrawAddressWithHttpInfo(String delegatorAddress) throws ApiException {
        okhttp3.Call localVarCall = delegatorWithdrawAddressValidateBeforeCall(delegatorAddress, null);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegatorWithdrawAddress queries withdraw address of a delegator. (asynchronously)
     * 
     * @param delegatorAddress delegator_address defines the delegator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegatorWithdrawAddressAsync(String delegatorAddress, final ApiCallback<InlineResponse20020> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegatorWithdrawAddressValidateBeforeCall(delegatorAddress, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denomMetadata
     * @param denom denom is the coin denom to query the metadata for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denomMetadataCall(String denom, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/denoms_metadata/{denom}"
            .replaceAll("\\{" + "denom" + "\\}", localVarApiClient.escapeString(denom.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denomMetadataValidateBeforeCall(String denom, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'denom' is set
        if (denom == null) {
            throw new ApiException("Missing the required parameter 'denom' when calling denomMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = denomMetadataCall(denom, _callback);
        return localVarCall;

    }

    /**
     * DenomsMetadata queries the client metadata of a given coin denomination.
     * 
     * @param denom denom is the coin denom to query the metadata for. (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2007 denomMetadata(String denom) throws ApiException {
        ApiResponse<InlineResponse2007> localVarResp = denomMetadataWithHttpInfo(denom);
        return localVarResp.getData();
    }

    /**
     * DenomsMetadata queries the client metadata of a given coin denomination.
     * 
     * @param denom denom is the coin denom to query the metadata for. (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2007> denomMetadataWithHttpInfo(String denom) throws ApiException {
        okhttp3.Call localVarCall = denomMetadataValidateBeforeCall(denom, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DenomsMetadata queries the client metadata of a given coin denomination. (asynchronously)
     * 
     * @param denom denom is the coin denom to query the metadata for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denomMetadataAsync(String denom, final ApiCallback<InlineResponse2007> _callback) throws ApiException {

        okhttp3.Call localVarCall = denomMetadataValidateBeforeCall(denom, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denomOwners
     * @param denom denom defines the coin denomination to query all account holders for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denomOwnersCall(String denom, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/denom_owners/{denom}"
            .replaceAll("\\{" + "denom" + "\\}", localVarApiClient.escapeString(denom.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denomOwnersValidateBeforeCall(String denom, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'denom' is set
        if (denom == null) {
            throw new ApiException("Missing the required parameter 'denom' when calling denomOwners(Async)");
        }
        

        okhttp3.Call localVarCall = denomOwnersCall(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * DenomOwners queries for all account addresses that own a particular token denomination.
     * 
     * @param denom denom defines the coin denomination to query all account holders for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2005 denomOwners(String denom, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse2005> localVarResp = denomOwnersWithHttpInfo(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * DenomOwners queries for all account addresses that own a particular token denomination.
     * 
     * @param denom denom defines the coin denomination to query all account holders for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2005> denomOwnersWithHttpInfo(String denom, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = denomOwnersValidateBeforeCall(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DenomOwners queries for all account addresses that own a particular token denomination. (asynchronously)
     * 
     * @param denom denom defines the coin denomination to query all account holders for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denomOwnersAsync(String denom, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse2005> _callback) throws ApiException {

        okhttp3.Call localVarCall = denomOwnersValidateBeforeCall(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denomsMetadata
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denomsMetadataCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/denoms_metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denomsMetadataValidateBeforeCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = denomsMetadataCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * DenomsMetadata queries the client metadata for all registered coin denominations.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2006 denomsMetadata(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp = denomsMetadataWithHttpInfo(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * DenomsMetadata queries the client metadata for all registered coin denominations.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2006> denomsMetadataWithHttpInfo(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = denomsMetadataValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DenomsMetadata queries the client metadata for all registered coin denominations. (asynchronously)
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denomsMetadataAsync(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse2006> _callback) throws ApiException {

        okhttp3.Call localVarCall = denomsMetadataValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deposit
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param depositor depositor defines the deposit addresses from the proposals. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call depositCall(String proposalId, String depositor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}"
            .replaceAll("\\{" + "proposal_id" + "\\}", localVarApiClient.escapeString(proposalId.toString()))
            .replaceAll("\\{" + "depositor" + "\\}", localVarApiClient.escapeString(depositor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositValidateBeforeCall(String proposalId, String depositor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'proposalId' is set
        if (proposalId == null) {
            throw new ApiException("Missing the required parameter 'proposalId' when calling deposit(Async)");
        }
        
        // verify the required parameter 'depositor' is set
        if (depositor == null) {
            throw new ApiException("Missing the required parameter 'depositor' when calling deposit(Async)");
        }
        

        okhttp3.Call localVarCall = depositCall(proposalId, depositor, _callback);
        return localVarCall;

    }

    /**
     * Deposit queries single deposit information based proposalID, depositAddr.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param depositor depositor defines the deposit addresses from the proposals. (required)
     * @return InlineResponse20030
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20030 deposit(String proposalId, String depositor) throws ApiException {
        ApiResponse<InlineResponse20030> localVarResp = depositWithHttpInfo(proposalId, depositor);
        return localVarResp.getData();
    }

    /**
     * Deposit queries single deposit information based proposalID, depositAddr.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param depositor depositor defines the deposit addresses from the proposals. (required)
     * @return ApiResponse&lt;InlineResponse20030&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20030> depositWithHttpInfo(String proposalId, String depositor) throws ApiException {
        okhttp3.Call localVarCall = depositValidateBeforeCall(proposalId, depositor, null);
        Type localVarReturnType = new TypeToken<InlineResponse20030>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deposit queries single deposit information based proposalID, depositAddr. (asynchronously)
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param depositor depositor defines the deposit addresses from the proposals. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call depositAsync(String proposalId, String depositor, final ApiCallback<InlineResponse20030> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositValidateBeforeCall(proposalId, depositor, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20030>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deposits
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call depositsCall(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits"
            .replaceAll("\\{" + "proposal_id" + "\\}", localVarApiClient.escapeString(proposalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositsValidateBeforeCall(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'proposalId' is set
        if (proposalId == null) {
            throw new ApiException("Missing the required parameter 'proposalId' when calling deposits(Async)");
        }
        

        okhttp3.Call localVarCall = depositsCall(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Deposits queries all deposits of a single proposal.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20029
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20029 deposits(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20029> localVarResp = depositsWithHttpInfo(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Deposits queries all deposits of a single proposal.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20029&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20029> depositsWithHttpInfo(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = depositsValidateBeforeCall(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20029>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deposits queries all deposits of a single proposal. (asynchronously)
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call depositsAsync(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20029> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositsValidateBeforeCall(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20029>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionParams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionParamsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionParamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = distributionParamsCall(_callback);
        return localVarCall;

    }

    /**
     * Params queries params of the distribution module.
     * 
     * @return InlineResponse20021
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20021 distributionParams() throws ApiException {
        ApiResponse<InlineResponse20021> localVarResp = distributionParamsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Params queries params of the distribution module.
     * 
     * @return ApiResponse&lt;InlineResponse20021&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20021> distributionParamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = distributionParamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20021>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params queries params of the distribution module. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionParamsAsync(final ApiCallback<InlineResponse20021> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionParamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20021>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evidence
     * @param evidenceHash evidence_hash defines the hash of the requested evidence. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evidenceCall(byte[] evidenceHash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/evidence/v1beta1/evidence/{evidence_hash}"
            .replaceAll("\\{" + "evidence_hash" + "\\}", localVarApiClient.escapeString(evidenceHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evidenceValidateBeforeCall(byte[] evidenceHash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'evidenceHash' is set
        if (evidenceHash == null) {
            throw new ApiException("Missing the required parameter 'evidenceHash' when calling evidence(Async)");
        }
        

        okhttp3.Call localVarCall = evidenceCall(evidenceHash, _callback);
        return localVarCall;

    }

    /**
     * Evidence queries evidence based on evidence hash.
     * 
     * @param evidenceHash evidence_hash defines the hash of the requested evidence. (required)
     * @return InlineResponse20025
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20025 evidence(byte[] evidenceHash) throws ApiException {
        ApiResponse<InlineResponse20025> localVarResp = evidenceWithHttpInfo(evidenceHash);
        return localVarResp.getData();
    }

    /**
     * Evidence queries evidence based on evidence hash.
     * 
     * @param evidenceHash evidence_hash defines the hash of the requested evidence. (required)
     * @return ApiResponse&lt;InlineResponse20025&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20025> evidenceWithHttpInfo(byte[] evidenceHash) throws ApiException {
        okhttp3.Call localVarCall = evidenceValidateBeforeCall(evidenceHash, null);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evidence queries evidence based on evidence hash. (asynchronously)
     * 
     * @param evidenceHash evidence_hash defines the hash of the requested evidence. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evidenceAsync(byte[] evidenceHash, final ApiCallback<InlineResponse20025> _callback) throws ApiException {

        okhttp3.Call localVarCall = evidenceValidateBeforeCall(evidenceHash, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for govParams
     * @param paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call govParamsCall(String paramsType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/params/{params_type}"
            .replaceAll("\\{" + "params_type" + "\\}", localVarApiClient.escapeString(paramsType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call govParamsValidateBeforeCall(String paramsType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paramsType' is set
        if (paramsType == null) {
            throw new ApiException("Missing the required parameter 'paramsType' when calling govParams(Async)");
        }
        

        okhttp3.Call localVarCall = govParamsCall(paramsType, _callback);
        return localVarCall;

    }

    /**
     * Params queries all parameters of the gov module.
     * 
     * @param paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;. (required)
     * @return InlineResponse20026
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20026 govParams(String paramsType) throws ApiException {
        ApiResponse<InlineResponse20026> localVarResp = govParamsWithHttpInfo(paramsType);
        return localVarResp.getData();
    }

    /**
     * Params queries all parameters of the gov module.
     * 
     * @param paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;. (required)
     * @return ApiResponse&lt;InlineResponse20026&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20026> govParamsWithHttpInfo(String paramsType) throws ApiException {
        okhttp3.Call localVarCall = govParamsValidateBeforeCall(paramsType, null);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params queries all parameters of the gov module. (asynchronously)
     * 
     * @param paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call govParamsAsync(String paramsType, final ApiCallback<InlineResponse20026> _callback) throws ApiException {

        okhttp3.Call localVarCall = govParamsValidateBeforeCall(paramsType, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grants
     * @param granter  (optional)
     * @param grantee  (optional)
     * @param msgTypeUrl Optional, msg_type_url, when set, will query only grants matching given msg type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantsCall(String granter, String grantee, String msgTypeUrl, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/authz/v1beta1/grants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (granter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("granter", granter));
        }

        if (grantee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grantee", grantee));
        }

        if (msgTypeUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msg_type_url", msgTypeUrl));
        }

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantsValidateBeforeCall(String granter, String grantee, String msgTypeUrl, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = grantsCall(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Returns list of &#x60;Authorization&#x60;, granted to the grantee by the granter.
     * 
     * @param granter  (optional)
     * @param grantee  (optional)
     * @param msgTypeUrl Optional, msg_type_url, when set, will query only grants matching given msg type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20055
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20055 grants(String granter, String grantee, String msgTypeUrl, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20055> localVarResp = grantsWithHttpInfo(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Returns list of &#x60;Authorization&#x60;, granted to the grantee by the granter.
     * 
     * @param granter  (optional)
     * @param grantee  (optional)
     * @param msgTypeUrl Optional, msg_type_url, when set, will query only grants matching given msg type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20055&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20055> grantsWithHttpInfo(String granter, String grantee, String msgTypeUrl, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = grantsValidateBeforeCall(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20055>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of &#x60;Authorization&#x60;, granted to the grantee by the granter. (asynchronously)
     * 
     * @param granter  (optional)
     * @param grantee  (optional)
     * @param msgTypeUrl Optional, msg_type_url, when set, will query only grants matching given msg type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantsAsync(String granter, String grantee, String msgTypeUrl, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20055> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantsValidateBeforeCall(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20055>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for historicalInfo
     * @param height height defines at which height to query the historical info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historicalInfoCall(String height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/historical_info/{height}"
            .replaceAll("\\{" + "height" + "\\}", localVarApiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call historicalInfoValidateBeforeCall(String height, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling historicalInfo(Async)");
        }
        

        okhttp3.Call localVarCall = historicalInfoCall(height, _callback);
        return localVarCall;

    }

    /**
     * HistoricalInfo queries the historical info for given height.
     * 
     * @param height height defines at which height to query the historical info. (required)
     * @return InlineResponse20043
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20043 historicalInfo(String height) throws ApiException {
        ApiResponse<InlineResponse20043> localVarResp = historicalInfoWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * HistoricalInfo queries the historical info for given height.
     * 
     * @param height height defines at which height to query the historical info. (required)
     * @return ApiResponse&lt;InlineResponse20043&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20043> historicalInfoWithHttpInfo(String height) throws ApiException {
        okhttp3.Call localVarCall = historicalInfoValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<InlineResponse20043>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * HistoricalInfo queries the historical info for given height. (asynchronously)
     * 
     * @param height height defines at which height to query the historical info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historicalInfoAsync(String height, final ApiCallback<InlineResponse20043> _callback) throws ApiException {

        okhttp3.Call localVarCall = historicalInfoValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20043>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inflation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inflationCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/mint/v1beta1/inflation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inflationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = inflationCall(_callback);
        return localVarCall;

    }

    /**
     * Inflation returns the current minting inflation value.
     * 
     * @return InlineResponse20035
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20035 inflation() throws ApiException {
        ApiResponse<InlineResponse20035> localVarResp = inflationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Inflation returns the current minting inflation value.
     * 
     * @return ApiResponse&lt;InlineResponse20035&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20035> inflationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = inflationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20035>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inflation returns the current minting inflation value. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inflationAsync(final ApiCallback<InlineResponse20035> _callback) throws ApiException {

        okhttp3.Call localVarCall = inflationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20035>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mintParams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mintParamsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/mint/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mintParamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = mintParamsCall(_callback);
        return localVarCall;

    }

    /**
     * Params returns the total set of minting parameters.
     * 
     * @return InlineResponse20036
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20036 mintParams() throws ApiException {
        ApiResponse<InlineResponse20036> localVarResp = mintParamsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Params returns the total set of minting parameters.
     * 
     * @return ApiResponse&lt;InlineResponse20036&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20036> mintParamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mintParamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20036>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params returns the total set of minting parameters. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mintParamsAsync(final ApiCallback<InlineResponse20036> _callback) throws ApiException {

        okhttp3.Call localVarCall = mintParamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20036>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moduleVersions
     * @param moduleName module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moduleVersionsCall(String moduleName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/upgrade/v1beta1/module_versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moduleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_name", moduleName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moduleVersionsValidateBeforeCall(String moduleName, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = moduleVersionsCall(moduleName, _callback);
        return localVarCall;

    }

    /**
     * ModuleVersions queries the list of module versions from state.
     * 
     * @param moduleName module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state. (optional)
     * @return InlineResponse20053
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20053 moduleVersions(String moduleName) throws ApiException {
        ApiResponse<InlineResponse20053> localVarResp = moduleVersionsWithHttpInfo(moduleName);
        return localVarResp.getData();
    }

    /**
     * ModuleVersions queries the list of module versions from state.
     * 
     * @param moduleName module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state. (optional)
     * @return ApiResponse&lt;InlineResponse20053&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20053> moduleVersionsWithHttpInfo(String moduleName) throws ApiException {
        okhttp3.Call localVarCall = moduleVersionsValidateBeforeCall(moduleName, null);
        Type localVarReturnType = new TypeToken<InlineResponse20053>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ModuleVersions queries the list of module versions from state. (asynchronously)
     * 
     * @param moduleName module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moduleVersionsAsync(String moduleName, final ApiCallback<InlineResponse20053> _callback) throws ApiException {

        okhttp3.Call localVarCall = moduleVersionsValidateBeforeCall(moduleName, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20053>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for params
     * @param subspace subspace defines the module to query the parameter for. (optional)
     * @param key key defines the key of the parameter in the subspace. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paramsCall(String subspace, String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/params/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subspace", subspace));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paramsValidateBeforeCall(String subspace, String key, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = paramsCall(subspace, key, _callback);
        return localVarCall;

    }

    /**
     * Params queries a specific parameter of a module, given its subspace and key.
     * 
     * @param subspace subspace defines the module to query the parameter for. (optional)
     * @param key key defines the key of the parameter in the subspace. (optional)
     * @return InlineResponse20037
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20037 params(String subspace, String key) throws ApiException {
        ApiResponse<InlineResponse20037> localVarResp = paramsWithHttpInfo(subspace, key);
        return localVarResp.getData();
    }

    /**
     * Params queries a specific parameter of a module, given its subspace and key.
     * 
     * @param subspace subspace defines the module to query the parameter for. (optional)
     * @param key key defines the key of the parameter in the subspace. (optional)
     * @return ApiResponse&lt;InlineResponse20037&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20037> paramsWithHttpInfo(String subspace, String key) throws ApiException {
        okhttp3.Call localVarCall = paramsValidateBeforeCall(subspace, key, null);
        Type localVarReturnType = new TypeToken<InlineResponse20037>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params queries a specific parameter of a module, given its subspace and key. (asynchronously)
     * 
     * @param subspace subspace defines the module to query the parameter for. (optional)
     * @param key key defines the key of the parameter in the subspace. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paramsAsync(String subspace, String key, final ApiCallback<InlineResponse20037> _callback) throws ApiException {

        okhttp3.Call localVarCall = paramsValidateBeforeCall(subspace, key, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20037>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pool
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call poolCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/pool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call poolValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = poolCall(_callback);
        return localVarCall;

    }

    /**
     * Pool queries the pool info.
     * 
     * @return InlineResponse20045
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20045 pool() throws ApiException {
        ApiResponse<InlineResponse20045> localVarResp = poolWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Pool queries the pool info.
     * 
     * @return ApiResponse&lt;InlineResponse20045&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20045> poolWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = poolValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20045>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pool queries the pool info. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call poolAsync(final ApiCallback<InlineResponse20045> _callback) throws ApiException {

        okhttp3.Call localVarCall = poolValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20045>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposal
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalCall(String proposalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}"
            .replaceAll("\\{" + "proposal_id" + "\\}", localVarApiClient.escapeString(proposalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalValidateBeforeCall(String proposalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'proposalId' is set
        if (proposalId == null) {
            throw new ApiException("Missing the required parameter 'proposalId' when calling proposal(Async)");
        }
        

        okhttp3.Call localVarCall = proposalCall(proposalId, _callback);
        return localVarCall;

    }

    /**
     * Proposal queries proposal details based on ProposalID.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @return InlineResponse20028
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20028 proposal(String proposalId) throws ApiException {
        ApiResponse<InlineResponse20028> localVarResp = proposalWithHttpInfo(proposalId);
        return localVarResp.getData();
    }

    /**
     * Proposal queries proposal details based on ProposalID.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @return ApiResponse&lt;InlineResponse20028&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20028> proposalWithHttpInfo(String proposalId) throws ApiException {
        okhttp3.Call localVarCall = proposalValidateBeforeCall(proposalId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20028>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proposal queries proposal details based on ProposalID. (asynchronously)
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalAsync(String proposalId, final ApiCallback<InlineResponse20028> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalValidateBeforeCall(proposalId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20028>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proposals
     * @param proposalStatus proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed. (optional, default to PROPOSAL_STATUS_UNSPECIFIED)
     * @param voter voter defines the voter address for the proposals. (optional)
     * @param depositor depositor defines the deposit addresses from the proposals. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsCall(String proposalStatus, String voter, String depositor, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proposalStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proposal_status", proposalStatus));
        }

        if (voter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voter", voter));
        }

        if (depositor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depositor", depositor));
        }

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proposalsValidateBeforeCall(String proposalStatus, String voter, String depositor, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = proposalsCall(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Proposals queries all proposals based on given status.
     * 
     * @param proposalStatus proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed. (optional, default to PROPOSAL_STATUS_UNSPECIFIED)
     * @param voter voter defines the voter address for the proposals. (optional)
     * @param depositor depositor defines the deposit addresses from the proposals. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20027
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20027 proposals(String proposalStatus, String voter, String depositor, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20027> localVarResp = proposalsWithHttpInfo(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Proposals queries all proposals based on given status.
     * 
     * @param proposalStatus proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed. (optional, default to PROPOSAL_STATUS_UNSPECIFIED)
     * @param voter voter defines the voter address for the proposals. (optional)
     * @param depositor depositor defines the deposit addresses from the proposals. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20027&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20027> proposalsWithHttpInfo(String proposalStatus, String voter, String depositor, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = proposalsValidateBeforeCall(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20027>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proposals queries all proposals based on given status. (asynchronously)
     * 
     * @param proposalStatus proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed. (optional, default to PROPOSAL_STATUS_UNSPECIFIED)
     * @param voter voter defines the voter address for the proposals. (optional)
     * @param depositor depositor defines the deposit addresses from the proposals. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proposalsAsync(String proposalStatus, String voter, String depositor, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20027> _callback) throws ApiException {

        okhttp3.Call localVarCall = proposalsValidateBeforeCall(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20027>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redelegations
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param srcValidatorAddr src_validator_addr defines the validator address to redelegate from. (optional)
     * @param dstValidatorAddr dst_validator_addr defines the validator address to redelegate to. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redelegationsCall(String delegatorAddr, String srcValidatorAddr, String dstValidatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations"
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (srcValidatorAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src_validator_addr", srcValidatorAddr));
        }

        if (dstValidatorAddr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dst_validator_addr", dstValidatorAddr));
        }

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redelegationsValidateBeforeCall(String delegatorAddr, String srcValidatorAddr, String dstValidatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling redelegations(Async)");
        }
        

        okhttp3.Call localVarCall = redelegationsCall(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Redelegations queries redelegations of given address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param srcValidatorAddr src_validator_addr defines the validator address to redelegate from. (optional)
     * @param dstValidatorAddr dst_validator_addr defines the validator address to redelegate to. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20039
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20039 redelegations(String delegatorAddr, String srcValidatorAddr, String dstValidatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20039> localVarResp = redelegationsWithHttpInfo(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Redelegations queries redelegations of given address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param srcValidatorAddr src_validator_addr defines the validator address to redelegate from. (optional)
     * @param dstValidatorAddr dst_validator_addr defines the validator address to redelegate to. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20039&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20039> redelegationsWithHttpInfo(String delegatorAddr, String srcValidatorAddr, String dstValidatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = redelegationsValidateBeforeCall(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redelegations queries redelegations of given address. (asynchronously)
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param srcValidatorAddr src_validator_addr defines the validator address to redelegate from. (optional)
     * @param dstValidatorAddr dst_validator_addr defines the validator address to redelegate to. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redelegationsAsync(String delegatorAddr, String srcValidatorAddr, String dstValidatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20039> _callback) throws ApiException {

        okhttp3.Call localVarCall = redelegationsValidateBeforeCall(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signingInfo
     * @param consAddress cons_address is the address to query signing info of (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signingInfoCall(String consAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/slashing/v1beta1/signing_infos/{cons_address}"
            .replaceAll("\\{" + "cons_address" + "\\}", localVarApiClient.escapeString(consAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signingInfoValidateBeforeCall(String consAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consAddress' is set
        if (consAddress == null) {
            throw new ApiException("Missing the required parameter 'consAddress' when calling signingInfo(Async)");
        }
        

        okhttp3.Call localVarCall = signingInfoCall(consAddress, _callback);
        return localVarCall;

    }

    /**
     * SigningInfo queries the signing info of given cons address
     * 
     * @param consAddress cons_address is the address to query signing info of (required)
     * @return QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod signingInfo(String consAddress) throws ApiException {
        ApiResponse<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod> localVarResp = signingInfoWithHttpInfo(consAddress);
        return localVarResp.getData();
    }

    /**
     * SigningInfo queries the signing info of given cons address
     * 
     * @param consAddress cons_address is the address to query signing info of (required)
     * @return ApiResponse&lt;QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod> signingInfoWithHttpInfo(String consAddress) throws ApiException {
        okhttp3.Call localVarCall = signingInfoValidateBeforeCall(consAddress, null);
        Type localVarReturnType = new TypeToken<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SigningInfo queries the signing info of given cons address (asynchronously)
     * 
     * @param consAddress cons_address is the address to query signing info of (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signingInfoAsync(String consAddress, final ApiCallback<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = signingInfoValidateBeforeCall(consAddress, _callback);
        Type localVarReturnType = new TypeToken<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signingInfos
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signingInfosCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/slashing/v1beta1/signing_infos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signingInfosValidateBeforeCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = signingInfosCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * SigningInfos queries signing info of all validators
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod signingInfos(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod> localVarResp = signingInfosWithHttpInfo(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * SigningInfos queries signing info of all validators
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod> signingInfosWithHttpInfo(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = signingInfosValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SigningInfos queries signing info of all validators (asynchronously)
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signingInfosAsync(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = signingInfosValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for slashingParams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slashingParamsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/slashing/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call slashingParamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = slashingParamsCall(_callback);
        return localVarCall;

    }

    /**
     * Params queries the parameters of slashing module
     * 
     * @return QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod slashingParams() throws ApiException {
        ApiResponse<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod> localVarResp = slashingParamsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Params queries the parameters of slashing module
     * 
     * @return ApiResponse&lt;QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod> slashingParamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = slashingParamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Params queries the parameters of slashing module (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call slashingParamsAsync(final ApiCallback<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = slashingParamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stakingDelegatorValidators
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stakingDelegatorValidatorsCall(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators"
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stakingDelegatorValidatorsValidateBeforeCall(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling stakingDelegatorValidators(Async)");
        }
        

        okhttp3.Call localVarCall = stakingDelegatorValidatorsCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * DelegatorValidators queries all validators info for given delegator address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20041
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20041 stakingDelegatorValidators(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20041> localVarResp = stakingDelegatorValidatorsWithHttpInfo(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * DelegatorValidators queries all validators info for given delegator address.
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20041&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20041> stakingDelegatorValidatorsWithHttpInfo(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = stakingDelegatorValidatorsValidateBeforeCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DelegatorValidators queries all validators info for given delegator address. (asynchronously)
     * 
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stakingDelegatorValidatorsAsync(String delegatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20041> _callback) throws ApiException {

        okhttp3.Call localVarCall = stakingDelegatorValidatorsValidateBeforeCall(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20041>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stakingParams
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stakingParamsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stakingParamsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = stakingParamsCall(_callback);
        return localVarCall;

    }

    /**
     * Parameters queries the staking parameters.
     * 
     * @return InlineResponse20044
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20044 stakingParams() throws ApiException {
        ApiResponse<InlineResponse20044> localVarResp = stakingParamsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Parameters queries the staking parameters.
     * 
     * @return ApiResponse&lt;InlineResponse20044&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20044> stakingParamsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = stakingParamsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20044>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parameters queries the staking parameters. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stakingParamsAsync(final ApiCallback<InlineResponse20044> _callback) throws ApiException {

        okhttp3.Call localVarCall = stakingParamsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20044>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supplyOf
     * @param denom denom is the coin denom to query balances for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supplyOfCall(String denom, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/supply/{denom}"
            .replaceAll("\\{" + "denom" + "\\}", localVarApiClient.escapeString(denom.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supplyOfValidateBeforeCall(String denom, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'denom' is set
        if (denom == null) {
            throw new ApiException("Missing the required parameter 'denom' when calling supplyOf(Async)");
        }
        

        okhttp3.Call localVarCall = supplyOfCall(denom, _callback);
        return localVarCall;

    }

    /**
     * SupplyOf queries the supply of a single coin.
     * 
     * @param denom denom is the coin denom to query balances for. (required)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2009 supplyOf(String denom) throws ApiException {
        ApiResponse<InlineResponse2009> localVarResp = supplyOfWithHttpInfo(denom);
        return localVarResp.getData();
    }

    /**
     * SupplyOf queries the supply of a single coin.
     * 
     * @param denom denom is the coin denom to query balances for. (required)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2009> supplyOfWithHttpInfo(String denom) throws ApiException {
        okhttp3.Call localVarCall = supplyOfValidateBeforeCall(denom, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SupplyOf queries the supply of a single coin. (asynchronously)
     * 
     * @param denom denom is the coin denom to query balances for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supplyOfAsync(String denom, final ApiCallback<InlineResponse2009> _callback) throws ApiException {

        okhttp3.Call localVarCall = supplyOfValidateBeforeCall(denom, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tallyResult
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tallyResultCall(String proposalId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally"
            .replaceAll("\\{" + "proposal_id" + "\\}", localVarApiClient.escapeString(proposalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tallyResultValidateBeforeCall(String proposalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'proposalId' is set
        if (proposalId == null) {
            throw new ApiException("Missing the required parameter 'proposalId' when calling tallyResult(Async)");
        }
        

        okhttp3.Call localVarCall = tallyResultCall(proposalId, _callback);
        return localVarCall;

    }

    /**
     * TallyResult queries the tally of a proposal vote.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @return InlineResponse20031
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20031 tallyResult(String proposalId) throws ApiException {
        ApiResponse<InlineResponse20031> localVarResp = tallyResultWithHttpInfo(proposalId);
        return localVarResp.getData();
    }

    /**
     * TallyResult queries the tally of a proposal vote.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @return ApiResponse&lt;InlineResponse20031&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20031> tallyResultWithHttpInfo(String proposalId) throws ApiException {
        okhttp3.Call localVarCall = tallyResultValidateBeforeCall(proposalId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20031>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TallyResult queries the tally of a proposal vote. (asynchronously)
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tallyResultAsync(String proposalId, final ApiCallback<InlineResponse20031> _callback) throws ApiException {

        okhttp3.Call localVarCall = tallyResultValidateBeforeCall(proposalId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20031>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for totalSupply
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalSupplyCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/bank/v1beta1/supply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call totalSupplyValidateBeforeCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = totalSupplyCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * TotalSupply queries the total supply of all coins.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod totalSupply(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod> localVarResp = totalSupplyWithHttpInfo(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * TotalSupply queries the total supply of all coins.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod> totalSupplyWithHttpInfo(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = totalSupplyValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TotalSupply queries the total supply of all coins. (asynchronously)
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call totalSupplyAsync(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = totalSupplyValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unbondingDelegation
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbondingDelegationCall(String validatorAddr, String delegatorAddr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation"
            .replaceAll("\\{" + "validator_addr" + "\\}", localVarApiClient.escapeString(validatorAddr.toString()))
            .replaceAll("\\{" + "delegator_addr" + "\\}", localVarApiClient.escapeString(delegatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unbondingDelegationValidateBeforeCall(String validatorAddr, String delegatorAddr, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling unbondingDelegation(Async)");
        }
        
        // verify the required parameter 'delegatorAddr' is set
        if (delegatorAddr == null) {
            throw new ApiException("Missing the required parameter 'delegatorAddr' when calling unbondingDelegation(Async)");
        }
        

        okhttp3.Call localVarCall = unbondingDelegationCall(validatorAddr, delegatorAddr, _callback);
        return localVarCall;

    }

    /**
     * UnbondingDelegation queries unbonding info for given validator delegator pair.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @return InlineResponse20047
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20047 unbondingDelegation(String validatorAddr, String delegatorAddr) throws ApiException {
        ApiResponse<InlineResponse20047> localVarResp = unbondingDelegationWithHttpInfo(validatorAddr, delegatorAddr);
        return localVarResp.getData();
    }

    /**
     * UnbondingDelegation queries unbonding info for given validator delegator pair.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20047&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20047> unbondingDelegationWithHttpInfo(String validatorAddr, String delegatorAddr) throws ApiException {
        okhttp3.Call localVarCall = unbondingDelegationValidateBeforeCall(validatorAddr, delegatorAddr, null);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UnbondingDelegation queries unbonding info for given validator delegator pair. (asynchronously)
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param delegatorAddr delegator_addr defines the delegator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbondingDelegationAsync(String validatorAddr, String delegatorAddr, final ApiCallback<InlineResponse20047> _callback) throws ApiException {

        okhttp3.Call localVarCall = unbondingDelegationValidateBeforeCall(validatorAddr, delegatorAddr, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upgradedConsensusState
     * @param lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradedConsensusStateCall(String lastHeight, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}"
            .replaceAll("\\{" + "last_height" + "\\}", localVarApiClient.escapeString(lastHeight.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradedConsensusStateValidateBeforeCall(String lastHeight, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lastHeight' is set
        if (lastHeight == null) {
            throw new ApiException("Missing the required parameter 'lastHeight' when calling upgradedConsensusState(Async)");
        }
        

        okhttp3.Call localVarCall = upgradedConsensusStateCall(lastHeight, _callback);
        return localVarCall;

    }

    /**
     * UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * 
     * @param lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored (required)
     * @return InlineResponse20054
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20054 upgradedConsensusState(String lastHeight) throws ApiException {
        ApiResponse<InlineResponse20054> localVarResp = upgradedConsensusStateWithHttpInfo(lastHeight);
        return localVarResp.getData();
    }

    /**
     * UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * 
     * @param lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored (required)
     * @return ApiResponse&lt;InlineResponse20054&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20054> upgradedConsensusStateWithHttpInfo(String lastHeight) throws ApiException {
        okhttp3.Call localVarCall = upgradedConsensusStateValidateBeforeCall(lastHeight, null);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier (asynchronously)
     * 
     * @param lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradedConsensusStateAsync(String lastHeight, final ApiCallback<InlineResponse20054> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradedConsensusStateValidateBeforeCall(lastHeight, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validator
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorCall(String validatorAddr, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}"
            .replaceAll("\\{" + "validator_addr" + "\\}", localVarApiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorValidateBeforeCall(String validatorAddr, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling validator(Async)");
        }
        

        okhttp3.Call localVarCall = validatorCall(validatorAddr, _callback);
        return localVarCall;

    }

    /**
     * Validator queries validator info for given validator address.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @return QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod validator(String validatorAddr) throws ApiException {
        ApiResponse<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod> localVarResp = validatorWithHttpInfo(validatorAddr);
        return localVarResp.getData();
    }

    /**
     * Validator queries validator info for given validator address.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @return ApiResponse&lt;QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod> validatorWithHttpInfo(String validatorAddr) throws ApiException {
        okhttp3.Call localVarCall = validatorValidateBeforeCall(validatorAddr, null);
        Type localVarReturnType = new TypeToken<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validator queries validator info for given validator address. (asynchronously)
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorAsync(String validatorAddr, final ApiCallback<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorValidateBeforeCall(validatorAddr, _callback);
        Type localVarReturnType = new TypeToken<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorCommission
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorCommissionCall(String validatorAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/commission"
            .replaceAll("\\{" + "validator_address" + "\\}", localVarApiClient.escapeString(validatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorCommissionValidateBeforeCall(String validatorAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddress' is set
        if (validatorAddress == null) {
            throw new ApiException("Missing the required parameter 'validatorAddress' when calling validatorCommission(Async)");
        }
        

        okhttp3.Call localVarCall = validatorCommissionCall(validatorAddress, _callback);
        return localVarCall;

    }

    /**
     * ValidatorCommission queries accumulated commission for a validator.
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @return QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod validatorCommission(String validatorAddress) throws ApiException {
        ApiResponse<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod> localVarResp = validatorCommissionWithHttpInfo(validatorAddress);
        return localVarResp.getData();
    }

    /**
     * ValidatorCommission queries accumulated commission for a validator.
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @return ApiResponse&lt;QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod> validatorCommissionWithHttpInfo(String validatorAddress) throws ApiException {
        okhttp3.Call localVarCall = validatorCommissionValidateBeforeCall(validatorAddress, null);
        Type localVarReturnType = new TypeToken<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidatorCommission queries accumulated commission for a validator. (asynchronously)
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorCommissionAsync(String validatorAddress, final ApiCallback<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorCommissionValidateBeforeCall(validatorAddress, _callback);
        Type localVarReturnType = new TypeToken<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorDelegations
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorDelegationsCall(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations"
            .replaceAll("\\{" + "validator_addr" + "\\}", localVarApiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorDelegationsValidateBeforeCall(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling validatorDelegations(Async)");
        }
        

        okhttp3.Call localVarCall = validatorDelegationsCall(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * ValidatorDelegations queries delegate info for given validator.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod validatorDelegations(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod> localVarResp = validatorDelegationsWithHttpInfo(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * ValidatorDelegations queries delegate info for given validator.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod> validatorDelegationsWithHttpInfo(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = validatorDelegationsValidateBeforeCall(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidatorDelegations queries delegate info for given validator. (asynchronously)
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorDelegationsAsync(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorDelegationsValidateBeforeCall(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorOutstandingRewards
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorOutstandingRewardsCall(String validatorAddress, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards"
            .replaceAll("\\{" + "validator_address" + "\\}", localVarApiClient.escapeString(validatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorOutstandingRewardsValidateBeforeCall(String validatorAddress, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddress' is set
        if (validatorAddress == null) {
            throw new ApiException("Missing the required parameter 'validatorAddress' when calling validatorOutstandingRewards(Async)");
        }
        

        okhttp3.Call localVarCall = validatorOutstandingRewardsCall(validatorAddress, _callback);
        return localVarCall;

    }

    /**
     * ValidatorOutstandingRewards queries rewards of a validator address.
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @return InlineResponse20022
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20022 validatorOutstandingRewards(String validatorAddress) throws ApiException {
        ApiResponse<InlineResponse20022> localVarResp = validatorOutstandingRewardsWithHttpInfo(validatorAddress);
        return localVarResp.getData();
    }

    /**
     * ValidatorOutstandingRewards queries rewards of a validator address.
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @return ApiResponse&lt;InlineResponse20022&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20022> validatorOutstandingRewardsWithHttpInfo(String validatorAddress) throws ApiException {
        okhttp3.Call localVarCall = validatorOutstandingRewardsValidateBeforeCall(validatorAddress, null);
        Type localVarReturnType = new TypeToken<InlineResponse20022>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidatorOutstandingRewards queries rewards of a validator address. (asynchronously)
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorOutstandingRewardsAsync(String validatorAddress, final ApiCallback<InlineResponse20022> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorOutstandingRewardsValidateBeforeCall(validatorAddress, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20022>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorSlashes
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param startingHeight starting_height defines the optional starting height to query the slashes. (optional)
     * @param endingHeight starting_height defines the optional ending height to query the slashes. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorSlashesCall(String validatorAddress, String startingHeight, String endingHeight, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes"
            .replaceAll("\\{" + "validator_address" + "\\}", localVarApiClient.escapeString(validatorAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startingHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_height", startingHeight));
        }

        if (endingHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_height", endingHeight));
        }

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorSlashesValidateBeforeCall(String validatorAddress, String startingHeight, String endingHeight, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddress' is set
        if (validatorAddress == null) {
            throw new ApiException("Missing the required parameter 'validatorAddress' when calling validatorSlashes(Async)");
        }
        

        okhttp3.Call localVarCall = validatorSlashesCall(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * ValidatorSlashes queries slash events of a validator.
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param startingHeight starting_height defines the optional starting height to query the slashes. (optional)
     * @param endingHeight starting_height defines the optional ending height to query the slashes. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20023
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20023 validatorSlashes(String validatorAddress, String startingHeight, String endingHeight, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20023> localVarResp = validatorSlashesWithHttpInfo(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * ValidatorSlashes queries slash events of a validator.
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param startingHeight starting_height defines the optional starting height to query the slashes. (optional)
     * @param endingHeight starting_height defines the optional ending height to query the slashes. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20023&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20023> validatorSlashesWithHttpInfo(String validatorAddress, String startingHeight, String endingHeight, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = validatorSlashesValidateBeforeCall(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20023>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidatorSlashes queries slash events of a validator. (asynchronously)
     * 
     * @param validatorAddress validator_address defines the validator address to query for. (required)
     * @param startingHeight starting_height defines the optional starting height to query the slashes. (optional)
     * @param endingHeight starting_height defines the optional ending height to query the slashes. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorSlashesAsync(String validatorAddress, String startingHeight, String endingHeight, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20023> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorSlashesValidateBeforeCall(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20023>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorUnbondingDelegations
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorUnbondingDelegationsCall(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations"
            .replaceAll("\\{" + "validator_addr" + "\\}", localVarApiClient.escapeString(validatorAddr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorUnbondingDelegationsValidateBeforeCall(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorAddr' is set
        if (validatorAddr == null) {
            throw new ApiException("Missing the required parameter 'validatorAddr' when calling validatorUnbondingDelegations(Async)");
        }
        

        okhttp3.Call localVarCall = validatorUnbondingDelegationsCall(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20048
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20048 validatorUnbondingDelegations(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20048> localVarResp = validatorUnbondingDelegationsWithHttpInfo(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20048&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20048> validatorUnbondingDelegationsWithHttpInfo(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = validatorUnbondingDelegationsValidateBeforeCall(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ValidatorUnbondingDelegations queries unbonding delegations of a validator. (asynchronously)
     * 
     * @param validatorAddr validator_addr defines the validator address to query for. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorUnbondingDelegationsAsync(String validatorAddr, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20048> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorUnbondingDelegationsValidateBeforeCall(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validators
     * @param status status enables to query for validators matching a given status. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorsCall(String status, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/staking/v1beta1/validators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorsValidateBeforeCall(String status, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validatorsCall(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Validators queries all validators that match the given status.
     * 
     * @param status status enables to query for validators matching a given status. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod validators(String status, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod> localVarResp = validatorsWithHttpInfo(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Validators queries all validators that match the given status.
     * 
     * @param status status enables to query for validators matching a given status. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod> validatorsWithHttpInfo(String status, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = validatorsValidateBeforeCall(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validators queries all validators that match the given status. (asynchronously)
     * 
     * @param status status enables to query for validators matching a given status. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorsAsync(String status, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorsValidateBeforeCall(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vote
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param voter voter defines the oter address for the proposals. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voteCall(String proposalId, String voter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}"
            .replaceAll("\\{" + "proposal_id" + "\\}", localVarApiClient.escapeString(proposalId.toString()))
            .replaceAll("\\{" + "voter" + "\\}", localVarApiClient.escapeString(voter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voteValidateBeforeCall(String proposalId, String voter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'proposalId' is set
        if (proposalId == null) {
            throw new ApiException("Missing the required parameter 'proposalId' when calling vote(Async)");
        }
        
        // verify the required parameter 'voter' is set
        if (voter == null) {
            throw new ApiException("Missing the required parameter 'voter' when calling vote(Async)");
        }
        

        okhttp3.Call localVarCall = voteCall(proposalId, voter, _callback);
        return localVarCall;

    }

    /**
     * Vote queries voted information based on proposalID, voterAddr.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param voter voter defines the oter address for the proposals. (required)
     * @return InlineResponse20033
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20033 vote(String proposalId, String voter) throws ApiException {
        ApiResponse<InlineResponse20033> localVarResp = voteWithHttpInfo(proposalId, voter);
        return localVarResp.getData();
    }

    /**
     * Vote queries voted information based on proposalID, voterAddr.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param voter voter defines the oter address for the proposals. (required)
     * @return ApiResponse&lt;InlineResponse20033&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20033> voteWithHttpInfo(String proposalId, String voter) throws ApiException {
        okhttp3.Call localVarCall = voteValidateBeforeCall(proposalId, voter, null);
        Type localVarReturnType = new TypeToken<InlineResponse20033>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Vote queries voted information based on proposalID, voterAddr. (asynchronously)
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param voter voter defines the oter address for the proposals. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voteAsync(String proposalId, String voter, final ApiCallback<InlineResponse20033> _callback) throws ApiException {

        okhttp3.Call localVarCall = voteValidateBeforeCall(proposalId, voter, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20033>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for votes
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesCall(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes"
            .replaceAll("\\{" + "proposal_id" + "\\}", localVarApiClient.escapeString(proposalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call votesValidateBeforeCall(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'proposalId' is set
        if (proposalId == null) {
            throw new ApiException("Missing the required parameter 'proposalId' when calling votes(Async)");
        }
        

        okhttp3.Call localVarCall = votesCall(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * Votes queries votes of a given proposal.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20032
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20032 votes(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20032> localVarResp = votesWithHttpInfo(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * Votes queries votes of a given proposal.
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20032&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20032> votesWithHttpInfo(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = votesValidateBeforeCall(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20032>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Votes queries votes of a given proposal. (asynchronously)
     * 
     * @param proposalId proposal_id defines the unique id of the proposal. (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesAsync(String proposalId, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20032> _callback) throws ApiException {

        okhttp3.Call localVarCall = votesValidateBeforeCall(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20032>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
