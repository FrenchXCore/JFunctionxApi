/*
 * Cosmos SDK - gRPC Gateway docs
 * A REST interface for state queries
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.api.cosmossdk;

import eu.frenchxcore.api.ApiCallback;
import eu.frenchxcore.api.ApiClient;
import eu.frenchxcore.api.ApiException;
import eu.frenchxcore.api.ApiResponse;
import eu.frenchxcore.api.Configuration;
import eu.frenchxcore.api.Pair;
import eu.frenchxcore.api.ProgressRequestBody;
import eu.frenchxcore.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.frenchxcore.model.cosmossdk.openapi.CosmosTxV1beta1GetTxResponse;
import eu.frenchxcore.model.cosmossdk.openapi.CosmosTxV1beta1GetTxsEventResponse;
import eu.frenchxcore.model.cosmossdk.openapi.CosmosTxV1beta1SimulateRequest;
import eu.frenchxcore.model.cosmossdk.openapi.InlineObject;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20010;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20011;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20012;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20013;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20014;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20015;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20049;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponse20050;
import eu.frenchxcore.model.cosmossdk.openapi.InlineResponseDefault;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceApi {
    private ApiClient localVarApiClient;

    public ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for broadcastTx
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/cosmos/tx/v1beta1/txs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call broadcastTxValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling broadcastTx(Async)");
        }
        

        okhttp3.Call localVarCall = broadcastTxCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * BroadcastTx broadcast transaction.
     * 
     * @param inlineObject  (required)
     * @return InlineResponse20050
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20050 broadcastTx(InlineObject inlineObject) throws ApiException {
        ApiResponse<InlineResponse20050> localVarResp = broadcastTxWithHttpInfo(inlineObject);
        return localVarResp.getData();
    }

    /**
     * BroadcastTx broadcast transaction.
     * 
     * @param inlineObject  (required)
     * @return ApiResponse&lt;InlineResponse20050&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20050> broadcastTxWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = broadcastTxValidateBeforeCall(inlineObject, null);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BroadcastTx broadcast transaction. (asynchronously)
     * 
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call broadcastTxAsync(InlineObject inlineObject, final ApiCallback<InlineResponse20050> _callback) throws ApiException {

        okhttp3.Call localVarCall = broadcastTxValidateBeforeCall(inlineObject, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlockByHeight
     * @param height  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockByHeightCall(String height, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/base/tendermint/v1beta1/blocks/{height}"
            .replaceAll("\\{" + "height" + "\\}", localVarApiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockByHeightValidateBeforeCall(String height, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling getBlockByHeight(Async)");
        }
        

        okhttp3.Call localVarCall = getBlockByHeightCall(height, _callback);
        return localVarCall;

    }

    /**
     * GetBlockByHeight queries block for given height.
     * 
     * @param height  (required)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20011 getBlockByHeight(String height) throws ApiException {
        ApiResponse<InlineResponse20011> localVarResp = getBlockByHeightWithHttpInfo(height);
        return localVarResp.getData();
    }

    /**
     * GetBlockByHeight queries block for given height.
     * 
     * @param height  (required)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20011> getBlockByHeightWithHttpInfo(String height) throws ApiException {
        okhttp3.Call localVarCall = getBlockByHeightValidateBeforeCall(height, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetBlockByHeight queries block for given height. (asynchronously)
     * 
     * @param height  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockByHeightAsync(String height, final ApiCallback<InlineResponse20011> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockByHeightValidateBeforeCall(height, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestBlock
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestBlockCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/base/tendermint/v1beta1/blocks/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestBlockValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLatestBlockCall(_callback);
        return localVarCall;

    }

    /**
     * GetLatestBlock returns the latest block.
     * 
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20010 getLatestBlock() throws ApiException {
        ApiResponse<InlineResponse20010> localVarResp = getLatestBlockWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * GetLatestBlock returns the latest block.
     * 
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20010> getLatestBlockWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLatestBlockValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetLatestBlock returns the latest block. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestBlockAsync(final ApiCallback<InlineResponse20010> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestBlockValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestValidatorSet
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestValidatorSetCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/base/tendermint/v1beta1/validatorsets/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestValidatorSetValidateBeforeCall(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLatestValidatorSetCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * GetLatestValidatorSet queries latest validator-set.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20014 getLatestValidatorSet(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20014> localVarResp = getLatestValidatorSetWithHttpInfo(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * GetLatestValidatorSet queries latest validator-set.
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20014> getLatestValidatorSetWithHttpInfo(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = getLatestValidatorSetValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetLatestValidatorSet queries latest validator-set. (asynchronously)
     * 
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestValidatorSetAsync(byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20014> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestValidatorSetValidateBeforeCall(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNodeInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeInfoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/base/tendermint/v1beta1/node_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getNodeInfoCall(_callback);
        return localVarCall;

    }

    /**
     * GetNodeInfo queries the current node info.
     * 
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20012 getNodeInfo() throws ApiException {
        ApiResponse<InlineResponse20012> localVarResp = getNodeInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * GetNodeInfo queries the current node info.
     * 
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20012> getNodeInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getNodeInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetNodeInfo queries the current node info. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeInfoAsync(final ApiCallback<InlineResponse20012> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSyncing
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSyncingCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/base/tendermint/v1beta1/syncing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSyncingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSyncingCall(_callback);
        return localVarCall;

    }

    /**
     * GetSyncing queries node syncing.
     * 
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20013 getSyncing() throws ApiException {
        ApiResponse<InlineResponse20013> localVarResp = getSyncingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * GetSyncing queries node syncing.
     * 
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20013> getSyncingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSyncingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetSyncing queries node syncing. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSyncingAsync(final ApiCallback<InlineResponse20013> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSyncingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTx
     * @param hash hash is the tx hash to query, encoded as a hex string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxCall(String hash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/tx/v1beta1/txs/{hash}"
            .replaceAll("\\{" + "hash" + "\\}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTxValidateBeforeCall(String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getTx(Async)");
        }
        

        okhttp3.Call localVarCall = getTxCall(hash, _callback);
        return localVarCall;

    }

    /**
     * GetTx fetches a tx by hash.
     * 
     * @param hash hash is the tx hash to query, encoded as a hex string. (required)
     * @return CosmosTxV1beta1GetTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public CosmosTxV1beta1GetTxResponse getTx(String hash) throws ApiException {
        ApiResponse<CosmosTxV1beta1GetTxResponse> localVarResp = getTxWithHttpInfo(hash);
        return localVarResp.getData();
    }

    /**
     * GetTx fetches a tx by hash.
     * 
     * @param hash hash is the tx hash to query, encoded as a hex string. (required)
     * @return ApiResponse&lt;CosmosTxV1beta1GetTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CosmosTxV1beta1GetTxResponse> getTxWithHttpInfo(String hash) throws ApiException {
        okhttp3.Call localVarCall = getTxValidateBeforeCall(hash, null);
        Type localVarReturnType = new TypeToken<CosmosTxV1beta1GetTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTx fetches a tx by hash. (asynchronously)
     * 
     * @param hash hash is the tx hash to query, encoded as a hex string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxAsync(String hash, final ApiCallback<CosmosTxV1beta1GetTxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTxValidateBeforeCall(hash, _callback);
        Type localVarReturnType = new TypeToken<CosmosTxV1beta1GetTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTxsEvent
     * @param events events is the list of transaction event type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param orderBy  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order (optional, default to ORDER_BY_UNSPECIFIED)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxsEventCall(List<String> events, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, String orderBy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/tx/v1beta1/txs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (events != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "events", events));
        }

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTxsEventValidateBeforeCall(List<String> events, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, String orderBy, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTxsEventCall(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, _callback);
        return localVarCall;

    }

    /**
     * GetTxsEvent fetches txs by event.
     * 
     * @param events events is the list of transaction event type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param orderBy  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order (optional, default to ORDER_BY_UNSPECIFIED)
     * @return CosmosTxV1beta1GetTxsEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public CosmosTxV1beta1GetTxsEventResponse getTxsEvent(List<String> events, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, String orderBy) throws ApiException {
        ApiResponse<CosmosTxV1beta1GetTxsEventResponse> localVarResp = getTxsEventWithHttpInfo(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy);
        return localVarResp.getData();
    }

    /**
     * GetTxsEvent fetches txs by event.
     * 
     * @param events events is the list of transaction event type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param orderBy  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order (optional, default to ORDER_BY_UNSPECIFIED)
     * @return ApiResponse&lt;CosmosTxV1beta1GetTxsEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CosmosTxV1beta1GetTxsEventResponse> getTxsEventWithHttpInfo(List<String> events, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = getTxsEventValidateBeforeCall(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, null);
        Type localVarReturnType = new TypeToken<CosmosTxV1beta1GetTxsEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTxsEvent fetches txs by event. (asynchronously)
     * 
     * @param events events is the list of transaction event type. (optional)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param orderBy  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order (optional, default to ORDER_BY_UNSPECIFIED)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTxsEventAsync(List<String> events, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, String orderBy, final ApiCallback<CosmosTxV1beta1GetTxsEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTxsEventValidateBeforeCall(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, _callback);
        Type localVarReturnType = new TypeToken<CosmosTxV1beta1GetTxsEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValidatorSetByHeight
     * @param height  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValidatorSetByHeightCall(String height, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cosmos/base/tendermint/v1beta1/validatorsets/{height}"
            .replaceAll("\\{" + "height" + "\\}", localVarApiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.key", paginationKey));
        }

        if (paginationOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.offset", paginationOffset));
        }

        if (paginationLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.limit", paginationLimit));
        }

        if (paginationCountTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.count_total", paginationCountTotal));
        }

        if (paginationReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination.reverse", paginationReverse));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidatorSetByHeightValidateBeforeCall(String height, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling getValidatorSetByHeight(Async)");
        }
        

        okhttp3.Call localVarCall = getValidatorSetByHeightCall(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        return localVarCall;

    }

    /**
     * GetValidatorSetByHeight queries validator-set at a given height.
     * 
     * @param height  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20015 getValidatorSetByHeight(String height, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        ApiResponse<InlineResponse20015> localVarResp = getValidatorSetByHeightWithHttpInfo(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse);
        return localVarResp.getData();
    }

    /**
     * GetValidatorSetByHeight queries validator-set at a given height.
     * 
     * @param height  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20015> getValidatorSetByHeightWithHttpInfo(String height, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse) throws ApiException {
        okhttp3.Call localVarCall = getValidatorSetByHeightValidateBeforeCall(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetValidatorSetByHeight queries validator-set at a given height. (asynchronously)
     * 
     * @param height  (required)
     * @param paginationKey key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set. (optional)
     * @param paginationOffset offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set. (optional)
     * @param paginationLimit limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app. (optional)
     * @param paginationCountTotal count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set. (optional)
     * @param paginationReverse reverse is set to true if results are to be returned in the descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValidatorSetByHeightAsync(String height, byte[] paginationKey, String paginationOffset, String paginationLimit, Boolean paginationCountTotal, Boolean paginationReverse, final ApiCallback<InlineResponse20015> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidatorSetByHeightValidateBeforeCall(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulate
     * @param cosmosTxV1beta1SimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateCall(CosmosTxV1beta1SimulateRequest cosmosTxV1beta1SimulateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cosmosTxV1beta1SimulateRequest;

        // create path and map variables
        String localVarPath = "/cosmos/tx/v1beta1/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateValidateBeforeCall(CosmosTxV1beta1SimulateRequest cosmosTxV1beta1SimulateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cosmosTxV1beta1SimulateRequest' is set
        if (cosmosTxV1beta1SimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'cosmosTxV1beta1SimulateRequest' when calling simulate(Async)");
        }
        

        okhttp3.Call localVarCall = simulateCall(cosmosTxV1beta1SimulateRequest, _callback);
        return localVarCall;

    }

    /**
     * Simulate simulates executing a transaction for estimating gas usage.
     * 
     * @param cosmosTxV1beta1SimulateRequest  (required)
     * @return InlineResponse20049
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20049 simulate(CosmosTxV1beta1SimulateRequest cosmosTxV1beta1SimulateRequest) throws ApiException {
        ApiResponse<InlineResponse20049> localVarResp = simulateWithHttpInfo(cosmosTxV1beta1SimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate simulates executing a transaction for estimating gas usage.
     * 
     * @param cosmosTxV1beta1SimulateRequest  (required)
     * @return ApiResponse&lt;InlineResponse20049&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20049> simulateWithHttpInfo(CosmosTxV1beta1SimulateRequest cosmosTxV1beta1SimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = simulateValidateBeforeCall(cosmosTxV1beta1SimulateRequest, null);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate simulates executing a transaction for estimating gas usage. (asynchronously)
     * 
     * @param cosmosTxV1beta1SimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAsync(CosmosTxV1beta1SimulateRequest cosmosTxV1beta1SimulateRequest, final ApiCallback<InlineResponse20049> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateValidateBeforeCall(cosmosTxV1beta1SimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
