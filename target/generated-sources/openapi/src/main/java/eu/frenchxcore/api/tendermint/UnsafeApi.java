/*
 * Tendermint RPC
 * Tendermint supports the following RPC protocols:  * URI over HTTP * JSON-RPC 2.0 over HTTP * JSON-RPC 2.0 over websockets (deprecated)  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A GET request with arguments encoded as query parameters:      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  In Tendermint v0.35 and earlier, JSONRPC requests can be also made via websocket.  The websocket interface is deprecated in Tendermint v0.36, and will be removed in v0.37.  The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. The RPC methods for event subscription (`subscribe`, `unsubscribe`, and `unsubscribe_all`) are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 
 *
 * The version of the OpenAPI document: Master
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.frenchxcore.api.tendermint;

import eu.frenchxcore.api.ApiCallback;
import eu.frenchxcore.api.ApiClient;
import eu.frenchxcore.api.ApiException;
import eu.frenchxcore.api.ApiResponse;
import eu.frenchxcore.api.Configuration;
import eu.frenchxcore.api.Pair;
import eu.frenchxcore.api.ProgressRequestBody;
import eu.frenchxcore.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.frenchxcore.model.tendermint.openapi.DialResp;
import eu.frenchxcore.model.tendermint.openapi.EmptyResponse;
import eu.frenchxcore.model.tendermint.openapi.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UnsafeApi {
    private ApiClient localVarApiClient;

    public UnsafeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UnsafeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for dialPeers
     * @param persistent Have the peers you are dialing be persistent (optional)
     * @param unconditional Have the peers you are dialing be unconditional (optional)
     * @param _private Have the peers you are dialing be private (optional)
     * @param peers array of peers to dial (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dialPeersCall(Boolean persistent, Boolean unconditional, Boolean _private, List<String> peers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dial_peers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (persistent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persistent", persistent));
        }

        if (unconditional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unconditional", unconditional));
        }

        if (_private != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("private", _private));
        }

        if (peers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "peers", peers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dialPeersValidateBeforeCall(Boolean persistent, Boolean unconditional, Boolean _private, List<String> peers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dialPeersCall(persistent, unconditional, _private, peers, _callback);
        return localVarCall;

    }

    /**
     * Add Peers/Persistent Peers (unsafe)
     * Set a persistent peer, this route in under unsafe, and has to manually enabled to use.  **Example:** curl &#39;localhost:26657/dial_peers?peers&#x3D;\\[\&quot;f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656\&quot;,\&quot;0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656\&quot;\\]&amp;persistent&#x3D;false&#39; 
     * @param persistent Have the peers you are dialing be persistent (optional)
     * @param unconditional Have the peers you are dialing be unconditional (optional)
     * @param _private Have the peers you are dialing be private (optional)
     * @param peers array of peers to dial (optional)
     * @return DialResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public DialResp dialPeers(Boolean persistent, Boolean unconditional, Boolean _private, List<String> peers) throws ApiException {
        ApiResponse<DialResp> localVarResp = dialPeersWithHttpInfo(persistent, unconditional, _private, peers);
        return localVarResp.getData();
    }

    /**
     * Add Peers/Persistent Peers (unsafe)
     * Set a persistent peer, this route in under unsafe, and has to manually enabled to use.  **Example:** curl &#39;localhost:26657/dial_peers?peers&#x3D;\\[\&quot;f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656\&quot;,\&quot;0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656\&quot;\\]&amp;persistent&#x3D;false&#39; 
     * @param persistent Have the peers you are dialing be persistent (optional)
     * @param unconditional Have the peers you are dialing be unconditional (optional)
     * @param _private Have the peers you are dialing be private (optional)
     * @param peers array of peers to dial (optional)
     * @return ApiResponse&lt;DialResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DialResp> dialPeersWithHttpInfo(Boolean persistent, Boolean unconditional, Boolean _private, List<String> peers) throws ApiException {
        okhttp3.Call localVarCall = dialPeersValidateBeforeCall(persistent, unconditional, _private, peers, null);
        Type localVarReturnType = new TypeToken<DialResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Peers/Persistent Peers (unsafe) (asynchronously)
     * Set a persistent peer, this route in under unsafe, and has to manually enabled to use.  **Example:** curl &#39;localhost:26657/dial_peers?peers&#x3D;\\[\&quot;f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656\&quot;,\&quot;0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656\&quot;\\]&amp;persistent&#x3D;false&#39; 
     * @param persistent Have the peers you are dialing be persistent (optional)
     * @param unconditional Have the peers you are dialing be unconditional (optional)
     * @param _private Have the peers you are dialing be private (optional)
     * @param peers array of peers to dial (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dialPeersAsync(Boolean persistent, Boolean unconditional, Boolean _private, List<String> peers, final ApiCallback<DialResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = dialPeersValidateBeforeCall(persistent, unconditional, _private, peers, _callback);
        Type localVarReturnType = new TypeToken<DialResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dialSeeds
     * @param peers list of seed nodes to dial (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dialSeedsCall(List<String> peers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dial_seeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "peers", peers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dialSeedsValidateBeforeCall(List<String> peers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dialSeedsCall(peers, _callback);
        return localVarCall;

    }

    /**
     * Dial Seeds (Unsafe)
     * Dial a peer, this route in under unsafe, and has to manually enabled to use    **Example:** curl &#39;localhost:26657/dial_seeds?seeds&#x3D;\\[\&quot;f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656\&quot;,\&quot;0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656\&quot;\\]&#39; 
     * @param peers list of seed nodes to dial (optional)
     * @return DialResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public DialResp dialSeeds(List<String> peers) throws ApiException {
        ApiResponse<DialResp> localVarResp = dialSeedsWithHttpInfo(peers);
        return localVarResp.getData();
    }

    /**
     * Dial Seeds (Unsafe)
     * Dial a peer, this route in under unsafe, and has to manually enabled to use    **Example:** curl &#39;localhost:26657/dial_seeds?seeds&#x3D;\\[\&quot;f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656\&quot;,\&quot;0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656\&quot;\\]&#39; 
     * @param peers list of seed nodes to dial (optional)
     * @return ApiResponse&lt;DialResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DialResp> dialSeedsWithHttpInfo(List<String> peers) throws ApiException {
        okhttp3.Call localVarCall = dialSeedsValidateBeforeCall(peers, null);
        Type localVarReturnType = new TypeToken<DialResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dial Seeds (Unsafe) (asynchronously)
     * Dial a peer, this route in under unsafe, and has to manually enabled to use    **Example:** curl &#39;localhost:26657/dial_seeds?seeds&#x3D;\\[\&quot;f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656\&quot;,\&quot;0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656\&quot;\\]&#39; 
     * @param peers list of seed nodes to dial (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dialing seeds in progress. See /net_info for details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dialSeedsAsync(List<String> peers, final ApiCallback<DialResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = dialSeedsValidateBeforeCall(peers, _callback);
        Type localVarReturnType = new TypeToken<DialResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsafeFlushMempool
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsafeFlushMempoolCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unsafe_flush_mempool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsafeFlushMempoolValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = unsafeFlushMempoolCall(_callback);
        return localVarCall;

    }

    /**
     * Flush mempool of all unconfirmed transactions
     * Flush flushes out the mempool. It acquires a read-lock, fetches all the transactions currently in the transaction store and removes each transaction from the store and all indexes and finally resets the cache.  Note, flushing the mempool may leave the mempool in an inconsistent state. 
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public EmptyResponse unsafeFlushMempool() throws ApiException {
        ApiResponse<EmptyResponse> localVarResp = unsafeFlushMempoolWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Flush mempool of all unconfirmed transactions
     * Flush flushes out the mempool. It acquires a read-lock, fetches all the transactions currently in the transaction store and removes each transaction from the store and all indexes and finally resets the cache.  Note, flushing the mempool may leave the mempool in an inconsistent state. 
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyResponse> unsafeFlushMempoolWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = unsafeFlushMempoolValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flush mempool of all unconfirmed transactions (asynchronously)
     * Flush flushes out the mempool. It acquires a read-lock, fetches all the transactions currently in the transaction store and removes each transaction from the store and all indexes and finally resets the cache.  Note, flushing the mempool may leave the mempool in an inconsistent state. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> empty answer </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> empty error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsafeFlushMempoolAsync(final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsafeFlushMempoolValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
